{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon1.ico","path":"images/favicon1.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/tou.jpg","path":"images/tou.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat.png","path":"images/wechat.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1505116156000},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1505087738000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1505087738000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1505087738000},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1505087738000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1505087738000},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1505087738000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1505087738000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1505087738000},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1505087738000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1505087738000},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1505087738000},{"_id":"themes/next/README.md","hash":"52bad95ac4c88371d3ae9d9ea6e0e14b8c723edf","modified":1505087738000},{"_id":"themes/next/_config.yml","hash":"0e3ca9db8a14e1729765bd5da2355ac3da14e879","modified":1505634800000},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1505087738000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1505087738000},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1505087738000},{"_id":"source/_posts/一年后的悸动.md","hash":"6535bb217df166709bf1f4151ff750e618170c68","modified":1527310395079},{"_id":"source/_posts/内心的平静.md","hash":"f617bd2cfe4c39c964154a74a17dbc5bbf1f9a6d","modified":1505634560000},{"_id":"source/_posts/大三运动会.md","hash":"1d586c8b6c59de887a6bd178d7b8ad1a2d46efc5","modified":1527309903081},{"_id":"source/about/index.md","hash":"5fb51fbf8115fff9947e3a8e76ed3b80034c264a","modified":1505721296000},{"_id":"source/categories/index.md","hash":"7312d4b92c42180bdb28b56f0be96a2c5b9dbf6d","modified":1505118742000},{"_id":"source/tags/index.md","hash":"4fa9660836eb950e4235ce0a668e95f9f747155e","modified":1505119644000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1505087738000},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1505087738000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1505087724000},{"_id":"themes/next/.git/index","hash":"59017343df8fe01f018a40a3a422d99131945dc7","modified":1505087738000},{"_id":"themes/next/.git/packed-refs","hash":"f5c4832504bc7eda7ccdbdbddf1e40dd214e857b","modified":1505087738000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1505087738000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"81dbdf09454cb26f9fd2e3ed1bf3df5af8a528fd","modified":1505087738000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"25e37338aeb69b07bfba81b5f8659cde92238ba9","modified":1505087738000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1505087738000},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1505087738000},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1505087738000},{"_id":"themes/next/languages/en.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1505087738000},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1505087738000},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1505087738000},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1505087738000},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1505087738000},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1505087738000},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1505087738000},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1505087738000},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1505087738000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23817934c6bf7a59a494743777526b8c8ae3350d","modified":1505087738000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19fb3c159fa6f4d58237e5a1a3857048a6add9a6","modified":1505087738000},{"_id":"themes/next/languages/zh-tw.yml","hash":"64a16181fcc3779ea335792c22fda3b5202e3e9e","modified":1505087738000},{"_id":"themes/next/layout/_layout.swig","hash":"fb55ab56e2d478cadc0c3906adfbc4a13620408e","modified":1505087738000},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1505087738000},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1505087738000},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1505087738000},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1505087738000},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1505087738000},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1505087738000},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1505087738000},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1505087738000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1505087738000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1505087738000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1505087738000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1505087738000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505087738000},{"_id":"source/_posts/spring/spring1.md","hash":"501542174da67bdea1bb4839c1e05a134430bc90","modified":1505695114000},{"_id":"source/_posts/spring/spring2.md","hash":"3eba473d9858af9af59587fcdba6929e0f821b51","modified":1505647944000},{"_id":"source/_posts/spring/spring3.md","hash":"4a780e59b65dee558b2ede85b34c242cb3c9ba1b","modified":1505651126000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1505087724000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1505087724000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1505087724000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1505087724000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1505087724000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1505087724000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1505087724000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1505087724000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1505087724000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1505087724000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1505087724000},{"_id":"themes/next/.git/logs/HEAD","hash":"e46226ab9b4790267ec72e96f367aff39ba55495","modified":1505087738000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1505087738000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1505087738000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1505087738000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1505087738000},{"_id":"themes/next/layout/_macro/post.swig","hash":"9896b34a7edc112c03b393a1602a616710a66ae1","modified":1505087738000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1505087738000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0d78052679a4f913a5338b66e0cc624c6eb1254b","modified":1505087738000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1505087738000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fc0ff72b3a8ab25029a070acee066d9eaa0b0493","modified":1505087738000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"32fc5cfed27048cea35f9000a5cec3ba29b398c2","modified":1505207744000},{"_id":"themes/next/layout/_partials/head.swig","hash":"71040aa738c57c24f8b703875d58ab7a262fe075","modified":1505087738000},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1505087738000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1505087738000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1505087738000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1505087738000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1505087738000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1505087738000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1505087738000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1505087738000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1505087738000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1505087738000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1505087738000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1505087738000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1505087738000},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1505087738000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1505087738000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1505087738000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1505087738000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1505087738000},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1505087738000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1505087738000},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1505087738000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1505087738000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1505087738000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1505087738000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1505087738000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1505087738000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1505087738000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1505087738000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1505087738000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1505087738000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1505087738000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1505087738000},{"_id":"themes/next/source/images/favicon.ico","hash":"fa11fca8d4119b9e0b35ae7751449f5f2888682a","modified":1505208878000},{"_id":"themes/next/source/images/favicon1.ico","hash":"5c7eeda6d3dd7935dcb844a6a44c520f970acd6d","modified":1505207858000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1505087738000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1505087738000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1505087738000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1505087738000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1505087738000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505087738000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505087738000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505087738000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505087738000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505087738000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505087738000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505087738000},{"_id":"themes/next/source/images/tou.jpg","hash":"c762f67769fd326997242384e1cc0feae6580505","modified":1494723508000},{"_id":"themes/next/source/images/wechat.png","hash":"874a371811506f4ea3c16c44c7e8ae4896b19118","modified":1505117328000},{"_id":"themes/next/.git/refs/heads/master","hash":"4a43acb13c3ee82042eed5ba10d54a7602e4df42","modified":1505087738000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1505087738000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1505087738000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1505087738000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1505087738000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1505087738000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1505087738000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1505087738000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1505087738000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1505087738000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1505087738000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1505087738000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1505087738000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1505087738000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1505087738000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1505087738000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1505087738000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1505087738000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"92ea45b877b1fec2010c7b409f121c986ee5075b","modified":1505087738000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1505528230000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"602104d7ac47f7888d97e810419e58593a79e8ba","modified":1505087738000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1505087738000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1505087738000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1505087738000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1505087738000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1505087738000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1505087738000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1505087738000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1505087738000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1505087738000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"38a9f43973704afe7e8ca50f35a25940ea96e3cf","modified":1505087738000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1505087738000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1505087738000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1505087738000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1505087738000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1505087738000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1505087738000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1505087738000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1505087738000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1505087738000},{"_id":"themes/next/source/js/src/motion.js","hash":"6d34f2a6ea6d73f7715d00f8b175854cd02baa36","modified":1505087738000},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1505087738000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1505087738000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1505087738000},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1505087738000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1505087738000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1505087738000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1505087738000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1505087738000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1505087738000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1505087738000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1505087738000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1505087738000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1505087738000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1505087738000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1505087738000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1505087738000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1505087738000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1505087738000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1505087738000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1505087738000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1505087738000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1505087738000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1505087738000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1505087738000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1505087738000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1505087738000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1505087738000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1505087738000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"e46226ab9b4790267ec72e96f367aff39ba55495","modified":1505087738000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1505087738000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1505087738000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1505087738000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"c9b6e70e67a0b2c41a03181302379afdc26da5b6","modified":1505087738000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1505087738000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1505087738000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1505087738000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1505087738000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1505087738000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d4cf54b33e1bb8746a77ce2446d581d01be5329d","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"24617c40a0d9b5e516d9500a45bc47cb995f325e","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1505087738000},{"_id":"themes/next/source/images/alipay.jpg","hash":"73b0c00d624cac437fc63bda901edfb3c82bd2c2","modified":1505117328000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1505087738000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1505087738000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1505087738000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1505087738000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1505087738000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1505087738000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1505087738000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1505087738000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1505087738000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1505087738000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"e46226ab9b4790267ec72e96f367aff39ba55495","modified":1505087738000},{"_id":"themes/next/.git/objects/pack/pack-0dae690732eade185a460f45253c58ef3e7f30fe.idx","hash":"bee4d2278ed37ad2159dbff158be33045f859e78","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"37c7d10289df2deded057545ece3f652dbd18757","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfe6d162b4647aeadee109d06bb314ea252f6904","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1505087738000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1505087738000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1505087738000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1505087738000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1505087738000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1505087738000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1505087738000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1505087738000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1505087738000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1505087738000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1505087738000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1505087738000},{"_id":"themes/next/.git/objects/pack/pack-0dae690732eade185a460f45253c58ef3e7f30fe.pack","hash":"63fd1d0c5f4f2207f8616e8bef6619720eb5c882","modified":1505087738000},{"_id":"public/404.html","hash":"ff421958185bb04e6ef79ffd3cadf141b9b7ee3f","modified":1527310089975},{"_id":"public/categories/index.html","hash":"44c7415ae14cc22d86f0e446e68248e45e56d0a7","modified":1527310089976},{"_id":"public/tags/index.html","hash":"af96d0a0d4b008cc403d432c3c634f266e3add8c","modified":1527310089976},{"_id":"public/archives/2018/index.html","hash":"edccd888f51ee6560ac438e786847a43e48cb050","modified":1527310089976},{"_id":"public/archives/2018/05/index.html","hash":"1424acef8af1a12c0c52bcb7d32e22f08ad2a28a","modified":1527310089976},{"_id":"public/categories/情感-大学/index.html","hash":"c39b4a0477c4267622dccda32cc850a03a9e1528","modified":1527310089976},{"_id":"public/categories/随想/index.html","hash":"6160b444d3e95eb81372688eff5185b40b42c1a5","modified":1527310089976},{"_id":"public/categories/spring/index.html","hash":"d4d56787295a5d9e7d96dfc574845407e8ddbd25","modified":1527310089976},{"_id":"public/tags/javaEE框架/index.html","hash":"e736986bc237f37f6106605d2d506b567d0aff26","modified":1527310089976},{"_id":"public/tags/JavaEE框架/index.html","hash":"35cd164fae8e65ce810df9ab40b5c9bb8b1c099c","modified":1527310089976},{"_id":"public/about/index.html","hash":"75490a38439735f602adb3155849ed316ac0a44c","modified":1527310089977},{"_id":"public/2018/05/14/大三运动会/index.html","hash":"9d02f1ee5953066f1b85475c3df1dc5561901bfa","modified":1527310089977},{"_id":"public/2017/09/17/spring/spring3/index.html","hash":"b40152e05ed1bc7faba0475af5007a283bf545f5","modified":1527310089977},{"_id":"public/2017/09/17/spring/spring2/index.html","hash":"72c6f41dbe6357f10a4b8905c798fd7e11c406fa","modified":1527310089977},{"_id":"public/2017/09/17/spring/spring1/index.html","hash":"cd34084e019674e5761ab07814305363e851f263","modified":1527310089977},{"_id":"public/2017/09/15/内心的平静/index.html","hash":"4d25b790e9d64794f2cefedf64e8c5e90989f022","modified":1527310089977},{"_id":"public/archives/index.html","hash":"adfb9dc6b37be36096cb90a675855f83225ee9a9","modified":1527310089977},{"_id":"public/archives/2017/index.html","hash":"1e407cfa0c4f4d31936692a9d3662062f450eac7","modified":1527310089977},{"_id":"public/archives/2017/09/index.html","hash":"e42a9dda22c2f26b89540a84f3a312dc5bccb2b1","modified":1527310089977},{"_id":"public/index.html","hash":"f4d46dab27d326d54bcb474793cda8454a424b3b","modified":1527310398975},{"_id":"public/2018/05/26/一年后的悸动/index.html","hash":"74c647a1d020aea8d82fa293392ef92a3f6a59d1","modified":1527310398974},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1527310089986},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1527310089986},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1527310089986},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1527310089986},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1527310089986},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1527310089986},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1527310089986},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1527310089986},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1527310089987},{"_id":"public/images/favicon.ico","hash":"fa11fca8d4119b9e0b35ae7751449f5f2888682a","modified":1527310089987},{"_id":"public/images/favicon1.ico","hash":"5c7eeda6d3dd7935dcb844a6a44c520f970acd6d","modified":1527310089987},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527310089987},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527310089987},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1527310089987},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1527310089987},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1527310089987},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1527310089987},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1527310089987},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1527310089987},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1527310089987},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1527310089987},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1527310089987},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1527310089987},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1527310089987},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1527310089987},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1527310089988},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1527310089988},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1527310089988},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1527310089988},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1527310089988},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1527310089988},{"_id":"public/images/tou.jpg","hash":"c762f67769fd326997242384e1cc0feae6580505","modified":1527310090594},{"_id":"public/images/wechat.png","hash":"874a371811506f4ea3c16c44c7e8ae4896b19118","modified":1527310090595},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527310090597},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527310090597},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1527310090603},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1527310090604},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1527310090604},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1527310090604},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1527310090604},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1527310090605},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1527310090605},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1527310090605},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1527310090605},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1527310090605},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1527310090605},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1527310090605},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1527310090606},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1527310090606},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1527310090606},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1527310090606},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1527310090606},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1527310090606},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1527310090606},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1527310090606},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1527310090606},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1527310090606},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1527310090607},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1527310090607},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1527310090607},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1527310090607},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1527310090607},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1527310090607},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1527310090607},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1527310090607},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1527310090607},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1527310090607},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1527310090607},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1527310090608},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1527310090608},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1527310090608},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1527310090608},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1527310090608},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1527310090608},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1527310090608},{"_id":"public/css/main.css","hash":"69dd021d3be1cd0dd7e442c4c2681b147c6aa80d","modified":1527310090608},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1527310090608},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527310090608},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1527310090608},{"_id":"public/js/src/motion.js","hash":"da146caf488078a634d961debf2a71ce4106018c","modified":1527310090611},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1527310090611},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1527310090611},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1527310090611},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1527310090611},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527310090611},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1527310090612},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1527310090612},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1527310090615},{"_id":"public/images/alipay.jpg","hash":"73b0c00d624cac437fc63bda901edfb3c82bd2c2","modified":1527310090615},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1527310090617},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527310090618},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1527310090623},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1527310090623},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527310090624},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1527310090624},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1527310090624},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1527310090624},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527310090624},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1527310090624},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1527310090626},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1527310090627},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1527310090628},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1527310090631},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1527310090632},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1527310090634},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1527310090650},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1527310090667}],"Category":[{"name":"情感/大学","_id":"cjhmwzqkc00052fpzge16gvy4"},{"name":"随想","_id":"cjhmwzqkg00082fpz9xu0pw23"},{"name":"spring","_id":"cjhmwzqmw000f2fpz1csdvvbk"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-05-17T02:13:49.778Z","updated":"2017-09-11T07:49:16.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjhmwzqdc00002fpzyhukdgyl","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"我本微末凡尘，却也心向天空","date":"2017-09-11T01:42:41.000Z","_content":"\n我是一个普通的人，也没什么厉害的地方。\n有时懒惰，有时勤快。\n有时安静，有时吵闹。\n我一直认为人是有多面性的，你所看到的只是他的一部分\n想做一个温柔的人，温柔的对待这个世界\n告诉自己：不要随意评价一个人，你又不了解他，凭什么批判他。\n\n这么多年，多亏生命中出现的贵人，教会了我很多，让我想成为更好的自己。\n一同学评价我：外表文静，内心狂野。\n我觉得很贴切，喜欢做一些很大胆的事，有的做了，有的没做，比如在操场躺着睡一晚就没去做。\n另一同学评价我说：只适合做老公。（连女朋友都找不到，哪来的老婆）这是要注孤生吗233333\n希望自己: **不念过去，不畏将来**\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 我本微末凡尘，却也心向天空\ndate: 2017-09-11 09:42:41\n---\n\n我是一个普通的人，也没什么厉害的地方。\n有时懒惰，有时勤快。\n有时安静，有时吵闹。\n我一直认为人是有多面性的，你所看到的只是他的一部分\n想做一个温柔的人，温柔的对待这个世界\n告诉自己：不要随意评价一个人，你又不了解他，凭什么批判他。\n\n这么多年，多亏生命中出现的贵人，教会了我很多，让我想成为更好的自己。\n一同学评价我：外表文静，内心狂野。\n我觉得很贴切，喜欢做一些很大胆的事，有的做了，有的没做，比如在操场躺着睡一晚就没去做。\n另一同学评价我说：只适合做老公。（连女朋友都找不到，哪来的老婆）这是要注孤生吗233333\n希望自己: **不念过去，不畏将来**\n\n\n\n\n\n","updated":"2017-09-18T07:54:56.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjhmwzqk500022fpz1tnd93k2","content":"<p>我是一个普通的人，也没什么厉害的地方。<br>有时懒惰，有时勤快。<br>有时安静，有时吵闹。<br>我一直认为人是有多面性的，你所看到的只是他的一部分<br>想做一个温柔的人，温柔的对待这个世界<br>告诉自己：不要随意评价一个人，你又不了解他，凭什么批判他。</p>\n<p>这么多年，多亏生命中出现的贵人，教会了我很多，让我想成为更好的自己。<br>一同学评价我：外表文静，内心狂野。<br>我觉得很贴切，喜欢做一些很大胆的事，有的做了，有的没做，比如在操场躺着睡一晚就没去做。<br>另一同学评价我说：只适合做老公。（连女朋友都找不到，哪来的老婆）这是要注孤生吗233333<br>希望自己: <strong>不念过去，不畏将来</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我是一个普通的人，也没什么厉害的地方。<br>有时懒惰，有时勤快。<br>有时安静，有时吵闹。<br>我一直认为人是有多面性的，你所看到的只是他的一部分<br>想做一个温柔的人，温柔的对待这个世界<br>告诉自己：不要随意评价一个人，你又不了解他，凭什么批判他。</p>\n<p>这么多年，多亏生命中出现的贵人，教会了我很多，让我想成为更好的自己。<br>一同学评价我：外表文静，内心狂野。<br>我觉得很贴切，喜欢做一些很大胆的事，有的做了，有的没做，比如在操场躺着睡一晚就没去做。<br>另一同学评价我说：只适合做老公。（连女朋友都找不到，哪来的老婆）这是要注孤生吗233333<br>希望自己: <strong>不念过去，不畏将来</strong></p>\n"},{"title":"分类","date":"2017-09-11T01:40:57.000Z","type":"categories","categories":"java","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-09-11 09:40:57\ntype: \"categories\"\ncategories: java\n---\n","updated":"2017-09-11T08:32:22.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjhmwzqka00042fpzsa4979bj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-09-11T01:42:33.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-09-11 09:42:33\n---\n","updated":"2017-09-11T08:47:24.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjhmwzqkf00072fpzqlsdur5f","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"一年后的悸动","date":"2018-05-26T04:27:59.000Z","_content":"　　分手一年之后，一次我打完饭刚转头，就看到了她。她也正好来吃饭，我只摇摇手和她打了个招呼，便去吃饭了。\n　　在坐下来之后，我的内心忍不住的悸动，终究还是放不下这段感情，在人多的时候看到她，第一反应就是躲，但又想偷偷看她。\n　　一年过去了，但每次和她的小交集，都让我的心不能平静，我这一年真是一点没变，真是应了那句老话：江山易改，本性难移。\n　　希望我能早日不再如此感情用事！\n","source":"_posts/一年后的悸动.md","raw":"---\ntitle: 一年后的悸动\ndate: 2018-05-26 12:27:59\ncategories: 情感/大学\ntags:\n---\n　　分手一年之后，一次我打完饭刚转头，就看到了她。她也正好来吃饭，我只摇摇手和她打了个招呼，便去吃饭了。\n　　在坐下来之后，我的内心忍不住的悸动，终究还是放不下这段感情，在人多的时候看到她，第一反应就是躲，但又想偷偷看她。\n　　一年过去了，但每次和她的小交集，都让我的心不能平静，我这一年真是一点没变，真是应了那句老话：江山易改，本性难移。\n　　希望我能早日不再如此感情用事！\n","slug":"一年后的悸动","published":1,"updated":"2018-05-26T04:53:15.079Z","_id":"cjhmwzqjy00012fpz5zh5vrjo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>　　分手一年之后，一次我打完饭刚转头，就看到了她。她也正好来吃饭，我只摇摇手和她打了个招呼，便去吃饭了。<br>　　在坐下来之后，我的内心忍不住的悸动，终究还是放不下这段感情，在人多的时候看到她，第一反应就是躲，但又想偷偷看她。<br>　　一年过去了，但每次和她的小交集，都让我的心不能平静，我这一年真是一点没变，真是应了那句老话：江山易改，本性难移。<br>　　希望我能早日不再如此感情用事！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　分手一年之后，一次我打完饭刚转头，就看到了她。她也正好来吃饭，我只摇摇手和她打了个招呼，便去吃饭了。<br>　　在坐下来之后，我的内心忍不住的悸动，终究还是放不下这段感情，在人多的时候看到她，第一反应就是躲，但又想偷偷看她。<br>　　一年过去了，但每次和她的小交集，都让我的心不能平静，我这一年真是一点没变，真是应了那句老话：江山易改，本性难移。<br>　　希望我能早日不再如此感情用事！</p>\n"},{"title":"内心的平静","date":"2017-09-15T09:22:33.000Z","_content":"\n\t有时候，特别是刚睡醒时，整个人会进入一个状态：内心特别平静，不想说话，整个世界仿佛只有我一个人，能更温柔的对待每一个人。\n\t我很喜欢这种状态。","source":"_posts/内心的平静.md","raw":"---\ntitle: 内心的平静\ndate: 2017-09-15 17:22:33\ncategories: 随想\ntags:\n---\n\n\t有时候，特别是刚睡醒时，整个人会进入一个状态：内心特别平静，不想说话，整个世界仿佛只有我一个人，能更温柔的对待每一个人。\n\t我很喜欢这种状态。","slug":"内心的平静","published":1,"updated":"2017-09-17T07:49:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhmwzqk800032fpzgn8kh5jy","content":"<pre><code>有时候，特别是刚睡醒时，整个人会进入一个状态：内心特别平静，不想说话，整个世界仿佛只有我一个人，能更温柔的对待每一个人。\n我很喜欢这种状态。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>有时候，特别是刚睡醒时，整个人会进入一个状态：内心特别平静，不想说话，整个世界仿佛只有我一个人，能更温柔的对待每一个人。\n我很喜欢这种状态。\n</code></pre>"},{"title":"大三运动会","date":"2018-05-13T23:46:47.000Z","_content":"　　大三那年运动会，最后一项1000米跑。班上女生在我跑之前就跑好了，在我还没跑之前，已经走了一部分人了。\n当我跑到最后一圈时，我看了一眼她之前的位置，发现她不在那个位置，我以为她已经走了。我休息了一会，突然她\n从铁架台下来了，原来她还没走。我不知道她是不是刚好这个时候准备走，还是她看了我的跑步。我倒挺希望是后者。  \n　　也许这个问题永远我也不会知道答案。发现这件事给我带来的激动，兴奋足矣，其他的都不重要了。\n","source":"_posts/大三运动会.md","raw":"---\ntitle: 大三运动会\ndate: 2018-05-14 07:46:47\ncategories: 情感/大学\n---\n　　大三那年运动会，最后一项1000米跑。班上女生在我跑之前就跑好了，在我还没跑之前，已经走了一部分人了。\n当我跑到最后一圈时，我看了一眼她之前的位置，发现她不在那个位置，我以为她已经走了。我休息了一会，突然她\n从铁架台下来了，原来她还没走。我不知道她是不是刚好这个时候准备走，还是她看了我的跑步。我倒挺希望是后者。  \n　　也许这个问题永远我也不会知道答案。发现这件事给我带来的激动，兴奋足矣，其他的都不重要了。\n","slug":"大三运动会","published":1,"updated":"2018-05-26T04:45:03.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhmwzqke00062fpz0uype9f7","content":"<p>　　大三那年运动会，最后一项1000米跑。班上女生在我跑之前就跑好了，在我还没跑之前，已经走了一部分人了。<br>当我跑到最后一圈时，我看了一眼她之前的位置，发现她不在那个位置，我以为她已经走了。我休息了一会，突然她<br>从铁架台下来了，原来她还没走。我不知道她是不是刚好这个时候准备走，还是她看了我的跑步。我倒挺希望是后者。<br>　　也许这个问题永远我也不会知道答案。发现这件事给我带来的激动，兴奋足矣，其他的都不重要了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　大三那年运动会，最后一项1000米跑。班上女生在我跑之前就跑好了，在我还没跑之前，已经走了一部分人了。<br>当我跑到最后一圈时，我看了一眼她之前的位置，发现她不在那个位置，我以为她已经走了。我休息了一会，突然她<br>从铁架台下来了，原来她还没走。我不知道她是不是刚好这个时候准备走，还是她看了我的跑步。我倒挺希望是后者。<br>　　也许这个问题永远我也不会知道答案。发现这件事给我带来的激动，兴奋足矣，其他的都不重要了。</p>\n"},{"title":"spring小结（一）———把类加入Spring工厂","date":"2017-09-17T10:49:24.000Z","_content":"　　之前我们需要一个对象时，就得自己new一个新对象；现在我们把需要的类通过配置文件或注解方式放到spring工厂，它负责帮我们创建对象，我们需要哪一个类的对象时，就从工厂取出对象，我们无需再手动创建对象。\n<!--more-->\n　　那么如何把需要的类加入Spring工厂呢？我们有两种方式：配置文件方式和注解方式。\n\n#### 配置文件方式（用于不是自己编写的类，无法在类上加注解)\nbeans.xml(spring配置文件)\n```\n    <!-- 加入约束  -->\n    xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n                        http://www.springframework.org/schema/beans/spring-beans.xsd\"\n                        \n    <!-- 通过bean标签可以注册一个类，由spring框架负责创建此类的一个对象 -->\n    <!-- id:此对象的一个唯一标识，可以通过此id从spring工厂中获取一个对象 \n    class:类的全路径 scope: prototype(原型) Singleton(单例，默认)-->\n    <bean scope=\"prototype\" id=\"userService\" class=\"cn.itcast.spring.UserService\" >\n```\nSingleton：单例-----同一个类，在spring工厂中只有唯一的一个实例(同一个对象)\nPrototype：原型-----同一个类，在spring工厂中有多个实例\n    \n\n>  Action:一般使用原型\n        Service:一般使用单例\n        Dao:一般使用单例\n\n##### 三种实例化bean的方式\n1.调用无参构造方法创建对象\n```\n    //通过构造方法创建UserService对象\n    <bean id=\"userService\" class=\"cn.itcast.spring.UserService\" />\n```\n\n2.使用静态工厂方法创建对象\n```\n    <bean id=\"userService\" class=\"cn.itcast.spring.StaticUserServiceFactory\" factory-method=\"createUserService\" />\n\n    //在StaticUserServiceFactory类创建UserService对象\n    public class StaticUserServiceFactory {\n        public static UserService createUserService(){\n            return new UserService();\n    }\n}\n```\n\n3.使用实例工厂方法创建对象\n```\n    <bean id=\"factory\" class=\"cn.itcast.spring.InstaceUserServiceFactory\"></bean>\n    <bean id=\"userService\" factory-bean=\"factory\" factory-method=\"createUserService\"></bean>\n\n    public class InstaceUserServiceFactory {\n        public UserService createUserService(){\n            return new UserService();\n    }\n}\n```\n\n  \n#### 注解方式（用于自己编写的类）\n\n1.在beans.xml中加入约束 \n\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\" http://www.springframework.org/schema/beans \n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context \n                            http://www.springframework.org/schema/context/spring-context.xsd\">\n```\n2.在beans.xml中配置组件扫描和支持注解：\n```\n    <!-- 配置组件扫描:由spring框架负责扫描指定的包下的类,为该包下的添加了注解的类创建对象  -->\n    <context:component-scan base-package=\"cn.itcast.spring.annotation\"/>\n    <!-- 加入spring的注解支持：引入spring的注解解析器 -->\n    <context:annotation-config/>\n```\n3.编写一个类，在类上加入注解： \n```\n//等价于在beans.xml中配置<bean id=\"\" class=\"\">\n\n@Repository------Dao层\n@Controller-----Action层\n@Service-------Service层\n@Component(\"test\")//通用的，test唯一标识\n四个注解作用一样，起区分作用\n\n@Scope(\"prototype\")//指定bean的作用域为原型方式\n```\n\n在工厂放入需要的类后，就可以在需要时取出类的对象了\n```\n    <!-- 读取beans文件，创建spring工厂 -->\n    ApplicationContext ctx = new ClassPathXmlApplicationContext(\"beans.xml\");\n    <!-- 通过id从spring工厂获取一个对象 -->\n    UserDao userDao = (UserDao) ctx.getBean(\"userDao\");  //（userDao）类名，首字母小写\n```\n\n#### 使用多个XML文件\n![](https://raw.githubusercontent.com/fallinsilence/usedPictures/master/moreXML.jpg)\n\n\n\n","source":"_posts/spring/spring1.md","raw":"---\ntitle: spring小结（一）———把类加入Spring工厂\ndate: 2017-09-17 18:49:24\ncategories: spring\ntags: javaEE框架\n---\n　　之前我们需要一个对象时，就得自己new一个新对象；现在我们把需要的类通过配置文件或注解方式放到spring工厂，它负责帮我们创建对象，我们需要哪一个类的对象时，就从工厂取出对象，我们无需再手动创建对象。\n<!--more-->\n　　那么如何把需要的类加入Spring工厂呢？我们有两种方式：配置文件方式和注解方式。\n\n#### 配置文件方式（用于不是自己编写的类，无法在类上加注解)\nbeans.xml(spring配置文件)\n```\n    <!-- 加入约束  -->\n    xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n                        http://www.springframework.org/schema/beans/spring-beans.xsd\"\n                        \n    <!-- 通过bean标签可以注册一个类，由spring框架负责创建此类的一个对象 -->\n    <!-- id:此对象的一个唯一标识，可以通过此id从spring工厂中获取一个对象 \n    class:类的全路径 scope: prototype(原型) Singleton(单例，默认)-->\n    <bean scope=\"prototype\" id=\"userService\" class=\"cn.itcast.spring.UserService\" >\n```\nSingleton：单例-----同一个类，在spring工厂中只有唯一的一个实例(同一个对象)\nPrototype：原型-----同一个类，在spring工厂中有多个实例\n    \n\n>  Action:一般使用原型\n        Service:一般使用单例\n        Dao:一般使用单例\n\n##### 三种实例化bean的方式\n1.调用无参构造方法创建对象\n```\n    //通过构造方法创建UserService对象\n    <bean id=\"userService\" class=\"cn.itcast.spring.UserService\" />\n```\n\n2.使用静态工厂方法创建对象\n```\n    <bean id=\"userService\" class=\"cn.itcast.spring.StaticUserServiceFactory\" factory-method=\"createUserService\" />\n\n    //在StaticUserServiceFactory类创建UserService对象\n    public class StaticUserServiceFactory {\n        public static UserService createUserService(){\n            return new UserService();\n    }\n}\n```\n\n3.使用实例工厂方法创建对象\n```\n    <bean id=\"factory\" class=\"cn.itcast.spring.InstaceUserServiceFactory\"></bean>\n    <bean id=\"userService\" factory-bean=\"factory\" factory-method=\"createUserService\"></bean>\n\n    public class InstaceUserServiceFactory {\n        public UserService createUserService(){\n            return new UserService();\n    }\n}\n```\n\n  \n#### 注解方式（用于自己编写的类）\n\n1.在beans.xml中加入约束 \n\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\" http://www.springframework.org/schema/beans \n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context \n                            http://www.springframework.org/schema/context/spring-context.xsd\">\n```\n2.在beans.xml中配置组件扫描和支持注解：\n```\n    <!-- 配置组件扫描:由spring框架负责扫描指定的包下的类,为该包下的添加了注解的类创建对象  -->\n    <context:component-scan base-package=\"cn.itcast.spring.annotation\"/>\n    <!-- 加入spring的注解支持：引入spring的注解解析器 -->\n    <context:annotation-config/>\n```\n3.编写一个类，在类上加入注解： \n```\n//等价于在beans.xml中配置<bean id=\"\" class=\"\">\n\n@Repository------Dao层\n@Controller-----Action层\n@Service-------Service层\n@Component(\"test\")//通用的，test唯一标识\n四个注解作用一样，起区分作用\n\n@Scope(\"prototype\")//指定bean的作用域为原型方式\n```\n\n在工厂放入需要的类后，就可以在需要时取出类的对象了\n```\n    <!-- 读取beans文件，创建spring工厂 -->\n    ApplicationContext ctx = new ClassPathXmlApplicationContext(\"beans.xml\");\n    <!-- 通过id从spring工厂获取一个对象 -->\n    UserDao userDao = (UserDao) ctx.getBean(\"userDao\");  //（userDao）类名，首字母小写\n```\n\n#### 使用多个XML文件\n![](https://raw.githubusercontent.com/fallinsilence/usedPictures/master/moreXML.jpg)\n\n\n\n","slug":"spring/spring1","published":1,"updated":"2017-09-18T00:38:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhmwzqmu000d2fpzldl5hu8h","content":"<p>　　之前我们需要一个对象时，就得自己new一个新对象；现在我们把需要的类通过配置文件或注解方式放到spring工厂，它负责帮我们创建对象，我们需要哪一个类的对象时，就从工厂取出对象，我们无需再手动创建对象。<br><a id=\"more\"></a><br>　　那么如何把需要的类加入Spring工厂呢？我们有两种方式：配置文件方式和注解方式。</p>\n<h4 id=\"配置文件方式（用于不是自己编写的类，无法在类上加注解\"><a href=\"#配置文件方式（用于不是自己编写的类，无法在类上加注解\" class=\"headerlink\" title=\"配置文件方式（用于不是自己编写的类，无法在类上加注解)\"></a>配置文件方式（用于不是自己编写的类，无法在类上加注解)</h4><p>beans.xml(spring配置文件)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 加入约束  --&gt;</div><div class=\"line\">xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </div><div class=\"line\">                    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</div><div class=\"line\">                    </div><div class=\"line\">&lt;!-- 通过bean标签可以注册一个类，由spring框架负责创建此类的一个对象 --&gt;</div><div class=\"line\">&lt;!-- id:此对象的一个唯一标识，可以通过此id从spring工厂中获取一个对象 </div><div class=\"line\">class:类的全路径 scope: prototype(原型) Singleton(单例，默认)--&gt;</div><div class=\"line\">&lt;bean scope=&quot;prototype&quot; id=&quot;userService&quot; class=&quot;cn.itcast.spring.UserService&quot; &gt;</div></pre></td></tr></table></figure></p>\n<p>Singleton：单例—–同一个类，在spring工厂中只有唯一的一个实例(同一个对象)<br>Prototype：原型—–同一个类，在spring工厂中有多个实例</p>\n<blockquote>\n<p> Action:一般使用原型<br>        Service:一般使用单例<br>        Dao:一般使用单例</p>\n</blockquote>\n<h5 id=\"三种实例化bean的方式\"><a href=\"#三种实例化bean的方式\" class=\"headerlink\" title=\"三种实例化bean的方式\"></a>三种实例化bean的方式</h5><p>1.调用无参构造方法创建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//通过构造方法创建UserService对象</div><div class=\"line\">&lt;bean id=&quot;userService&quot; class=&quot;cn.itcast.spring.UserService&quot; /&gt;</div></pre></td></tr></table></figure></p>\n<p>2.使用静态工厂方法创建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;bean id=&quot;userService&quot; class=&quot;cn.itcast.spring.StaticUserServiceFactory&quot; factory-method=&quot;createUserService&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    //在StaticUserServiceFactory类创建UserService对象</div><div class=\"line\">    public class StaticUserServiceFactory &#123;</div><div class=\"line\">        public static UserService createUserService()&#123;</div><div class=\"line\">            return new UserService();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.使用实例工厂方法创建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;bean id=&quot;factory&quot; class=&quot;cn.itcast.spring.InstaceUserServiceFactory&quot;&gt;&lt;/bean&gt;</div><div class=\"line\">    &lt;bean id=&quot;userService&quot; factory-bean=&quot;factory&quot; factory-method=&quot;createUserService&quot;&gt;&lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">    public class InstaceUserServiceFactory &#123;</div><div class=\"line\">        public UserService createUserService()&#123;</div><div class=\"line\">            return new UserService();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"注解方式（用于自己编写的类）\"><a href=\"#注解方式（用于自己编写的类）\" class=\"headerlink\" title=\"注解方式（用于自己编写的类）\"></a>注解方式（用于自己编写的类）</h4><p>1.在beans.xml中加入约束 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">       xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans </div><div class=\"line\">                            http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">                            http://www.springframework.org/schema/context </div><div class=\"line\">                            http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</div></pre></td></tr></table></figure>\n<p>2.在beans.xml中配置组件扫描和支持注解：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 配置组件扫描:由spring框架负责扫描指定的包下的类,为该包下的添加了注解的类创建对象  --&gt;</div><div class=\"line\">&lt;context:component-scan base-package=&quot;cn.itcast.spring.annotation&quot;/&gt;</div><div class=\"line\">&lt;!-- 加入spring的注解支持：引入spring的注解解析器 --&gt;</div><div class=\"line\">&lt;context:annotation-config/&gt;</div></pre></td></tr></table></figure></p>\n<p>3.编写一个类，在类上加入注解：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//等价于在beans.xml中配置&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">@Repository------Dao层</div><div class=\"line\">@Controller-----Action层</div><div class=\"line\">@Service-------Service层</div><div class=\"line\">@Component(&quot;test&quot;)//通用的，test唯一标识</div><div class=\"line\">四个注解作用一样，起区分作用</div><div class=\"line\"></div><div class=\"line\">@Scope(&quot;prototype&quot;)//指定bean的作用域为原型方式</div></pre></td></tr></table></figure></p>\n<p>在工厂放入需要的类后，就可以在需要时取出类的对象了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 读取beans文件，创建spring工厂 --&gt;</div><div class=\"line\">ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</div><div class=\"line\">&lt;!-- 通过id从spring工厂获取一个对象 --&gt;</div><div class=\"line\">UserDao userDao = (UserDao) ctx.getBean(&quot;userDao&quot;);  //（userDao）类名，首字母小写</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用多个XML文件\"><a href=\"#使用多个XML文件\" class=\"headerlink\" title=\"使用多个XML文件\"></a>使用多个XML文件</h4><p><img src=\"https://raw.githubusercontent.com/fallinsilence/usedPictures/master/moreXML.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>　　之前我们需要一个对象时，就得自己new一个新对象；现在我们把需要的类通过配置文件或注解方式放到spring工厂，它负责帮我们创建对象，我们需要哪一个类的对象时，就从工厂取出对象，我们无需再手动创建对象。<br>","more":"<br>　　那么如何把需要的类加入Spring工厂呢？我们有两种方式：配置文件方式和注解方式。</p>\n<h4 id=\"配置文件方式（用于不是自己编写的类，无法在类上加注解\"><a href=\"#配置文件方式（用于不是自己编写的类，无法在类上加注解\" class=\"headerlink\" title=\"配置文件方式（用于不是自己编写的类，无法在类上加注解)\"></a>配置文件方式（用于不是自己编写的类，无法在类上加注解)</h4><p>beans.xml(spring配置文件)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 加入约束  --&gt;</div><div class=\"line\">xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </div><div class=\"line\">                    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</div><div class=\"line\">                    </div><div class=\"line\">&lt;!-- 通过bean标签可以注册一个类，由spring框架负责创建此类的一个对象 --&gt;</div><div class=\"line\">&lt;!-- id:此对象的一个唯一标识，可以通过此id从spring工厂中获取一个对象 </div><div class=\"line\">class:类的全路径 scope: prototype(原型) Singleton(单例，默认)--&gt;</div><div class=\"line\">&lt;bean scope=&quot;prototype&quot; id=&quot;userService&quot; class=&quot;cn.itcast.spring.UserService&quot; &gt;</div></pre></td></tr></table></figure></p>\n<p>Singleton：单例—–同一个类，在spring工厂中只有唯一的一个实例(同一个对象)<br>Prototype：原型—–同一个类，在spring工厂中有多个实例</p>\n<blockquote>\n<p> Action:一般使用原型<br>        Service:一般使用单例<br>        Dao:一般使用单例</p>\n</blockquote>\n<h5 id=\"三种实例化bean的方式\"><a href=\"#三种实例化bean的方式\" class=\"headerlink\" title=\"三种实例化bean的方式\"></a>三种实例化bean的方式</h5><p>1.调用无参构造方法创建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//通过构造方法创建UserService对象</div><div class=\"line\">&lt;bean id=&quot;userService&quot; class=&quot;cn.itcast.spring.UserService&quot; /&gt;</div></pre></td></tr></table></figure></p>\n<p>2.使用静态工厂方法创建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;bean id=&quot;userService&quot; class=&quot;cn.itcast.spring.StaticUserServiceFactory&quot; factory-method=&quot;createUserService&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    //在StaticUserServiceFactory类创建UserService对象</div><div class=\"line\">    public class StaticUserServiceFactory &#123;</div><div class=\"line\">        public static UserService createUserService()&#123;</div><div class=\"line\">            return new UserService();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.使用实例工厂方法创建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;bean id=&quot;factory&quot; class=&quot;cn.itcast.spring.InstaceUserServiceFactory&quot;&gt;&lt;/bean&gt;</div><div class=\"line\">    &lt;bean id=&quot;userService&quot; factory-bean=&quot;factory&quot; factory-method=&quot;createUserService&quot;&gt;&lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">    public class InstaceUserServiceFactory &#123;</div><div class=\"line\">        public UserService createUserService()&#123;</div><div class=\"line\">            return new UserService();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"注解方式（用于自己编写的类）\"><a href=\"#注解方式（用于自己编写的类）\" class=\"headerlink\" title=\"注解方式（用于自己编写的类）\"></a>注解方式（用于自己编写的类）</h4><p>1.在beans.xml中加入约束 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">       xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans </div><div class=\"line\">                            http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">                            http://www.springframework.org/schema/context </div><div class=\"line\">                            http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</div></pre></td></tr></table></figure>\n<p>2.在beans.xml中配置组件扫描和支持注解：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 配置组件扫描:由spring框架负责扫描指定的包下的类,为该包下的添加了注解的类创建对象  --&gt;</div><div class=\"line\">&lt;context:component-scan base-package=&quot;cn.itcast.spring.annotation&quot;/&gt;</div><div class=\"line\">&lt;!-- 加入spring的注解支持：引入spring的注解解析器 --&gt;</div><div class=\"line\">&lt;context:annotation-config/&gt;</div></pre></td></tr></table></figure></p>\n<p>3.编写一个类，在类上加入注解：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//等价于在beans.xml中配置&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">@Repository------Dao层</div><div class=\"line\">@Controller-----Action层</div><div class=\"line\">@Service-------Service层</div><div class=\"line\">@Component(&quot;test&quot;)//通用的，test唯一标识</div><div class=\"line\">四个注解作用一样，起区分作用</div><div class=\"line\"></div><div class=\"line\">@Scope(&quot;prototype&quot;)//指定bean的作用域为原型方式</div></pre></td></tr></table></figure></p>\n<p>在工厂放入需要的类后，就可以在需要时取出类的对象了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 读取beans文件，创建spring工厂 --&gt;</div><div class=\"line\">ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</div><div class=\"line\">&lt;!-- 通过id从spring工厂获取一个对象 --&gt;</div><div class=\"line\">UserDao userDao = (UserDao) ctx.getBean(&quot;userDao&quot;);  //（userDao）类名，首字母小写</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用多个XML文件\"><a href=\"#使用多个XML文件\" class=\"headerlink\" title=\"使用多个XML文件\"></a>使用多个XML文件</h4><p><img src=\"https://raw.githubusercontent.com/fallinsilence/usedPictures/master/moreXML.jpg\" alt=\"\"></p>"},{"title":"spring小结（二）————依赖注入","date":"2017-09-17T11:06:21.000Z","_content":"## DI（依赖注入）\n\n　　之前我们写一个web项目时，在Servlet类中创建Service对象，调用service中的方法处理业务逻辑，在Service类中，又创建Dao对象，调用dao中的方法处理访问数据库的逻辑，这样一层一层的向下调用。这样做的结果是，类与类之间的耦合度太高，DI的目的就是降低耦合度。\n<!--more-->\n    \n　　之前我们需要一个对象时，就得自己new一个新对象；现在我们把需要的类通过配置文件或注解方式放到spring工厂，它负责帮我们创建对象；我们在Servlet类中需要创建Service对象，可以说Servlet类依赖Service对象，现在有了Spring工厂，不需要我们创建Service对象，我们只需从Spring工厂拿Service对象即可，Spring工厂把Servlet类所依赖的Service对象给注入进来了，这就是依赖注入。\n　　\n依赖注入依然是两种方式：xml方式和注解方式\n\n#### 注解方式\n\n- setter方法注入---为属性提供相应的setter方法，通过调用此方法注入属性值\n\n```\n    <bean id=\"userDao2\" class=\"cn.itcast.spring.di.UserDao\">\n        <property name=\"name\" value=\"二麻子\" />\n        <property name=\"age\" value=\"88\" />\n    </bean>\n    \n    private List<String> list;\n    private Set<String> set;\n    private String[] strs;\n    private Map<String, String> map;\n    private Properties pros;\n\n<!-- 使用setter方法注入集合类型的属性 -->\n    <bean id=\"userDao4\" class=\"cn.itcast.spring.di.UserDao\">\n        //List\n        <property name=\"list\">\n            <list>\n                <value>value1</value>\n                <value>value2</value>\n                <value>value3</value>\n            </list>\n        </property>\n        \n        //Set\n        <property name=\"set\">\n            <set>\n                <value>v1</value>\n                <value>v2</value>\n                <value>v3</value>\n            </set>\n        </property>\n\n        //数组\n        <property name=\"strs\">\n            <list>\n                <value>str1</value>\n                <value>str2</value>\n                <value>str3</value>\n            </list>\n        </property>\n\n        //Map\n        <property name=\"map\">\n            <entry key=\"k1\" value=\"v1\"></entry>\n            <entry key=\"k2\" value=\"v2\"></entry>\n            <entry key=\"k3\" value=\"v3\"></entry>\n        </property>\n\n        //properpies文件\n        <property name=\"pros\">\n            <props>\n                <prop key=\"key1\">value1</prop>\n                <prop key=\"key2\">value2</prop>\n            </props>\n        </property>\n    </bean>\n```\n- 构造方法注入----通过类的构造方法注入属性值\n```\n    <bean id=\"userDao1\" class=\"cn.itcast.spring.di.UserDao\">\n        <constructor-arg index=\"0\" value=\"小白\" />\n        <constructor-arg index=\"1\" value=\"20\" />\n    </bean>\n```\n\n#### 注解方式\n对于Bean属性的依赖注入分为两类，一类是对于属性是String类型或者基本数据类型Spring容器提供了@Value这个注解，另一类是对于属性是对象的提供了@Autowired和@Resource这两个注解。\n\n1．Resource注解:可以按照对象的类型注入，也可以按照对象的唯一标识注入\n  @Resource(name=\"userDao\")  //从工厂拿出userDao对象\n  \n2．AutoWired注解：只能按照对象的类型注入，如果需要按照对象的唯一标识注入，需要使用另外一个注解@Qualifier(value=\"userDao\")使用\n注意：Resource和AutoWired使用在属性上","source":"_posts/spring/spring2.md","raw":"---\ntitle: spring小结（二）————依赖注入\ndate: 2017-09-17 19:06:21\ncategories: spring\ntags: javaEE框架\n---\n## DI（依赖注入）\n\n　　之前我们写一个web项目时，在Servlet类中创建Service对象，调用service中的方法处理业务逻辑，在Service类中，又创建Dao对象，调用dao中的方法处理访问数据库的逻辑，这样一层一层的向下调用。这样做的结果是，类与类之间的耦合度太高，DI的目的就是降低耦合度。\n<!--more-->\n    \n　　之前我们需要一个对象时，就得自己new一个新对象；现在我们把需要的类通过配置文件或注解方式放到spring工厂，它负责帮我们创建对象；我们在Servlet类中需要创建Service对象，可以说Servlet类依赖Service对象，现在有了Spring工厂，不需要我们创建Service对象，我们只需从Spring工厂拿Service对象即可，Spring工厂把Servlet类所依赖的Service对象给注入进来了，这就是依赖注入。\n　　\n依赖注入依然是两种方式：xml方式和注解方式\n\n#### 注解方式\n\n- setter方法注入---为属性提供相应的setter方法，通过调用此方法注入属性值\n\n```\n    <bean id=\"userDao2\" class=\"cn.itcast.spring.di.UserDao\">\n        <property name=\"name\" value=\"二麻子\" />\n        <property name=\"age\" value=\"88\" />\n    </bean>\n    \n    private List<String> list;\n    private Set<String> set;\n    private String[] strs;\n    private Map<String, String> map;\n    private Properties pros;\n\n<!-- 使用setter方法注入集合类型的属性 -->\n    <bean id=\"userDao4\" class=\"cn.itcast.spring.di.UserDao\">\n        //List\n        <property name=\"list\">\n            <list>\n                <value>value1</value>\n                <value>value2</value>\n                <value>value3</value>\n            </list>\n        </property>\n        \n        //Set\n        <property name=\"set\">\n            <set>\n                <value>v1</value>\n                <value>v2</value>\n                <value>v3</value>\n            </set>\n        </property>\n\n        //数组\n        <property name=\"strs\">\n            <list>\n                <value>str1</value>\n                <value>str2</value>\n                <value>str3</value>\n            </list>\n        </property>\n\n        //Map\n        <property name=\"map\">\n            <entry key=\"k1\" value=\"v1\"></entry>\n            <entry key=\"k2\" value=\"v2\"></entry>\n            <entry key=\"k3\" value=\"v3\"></entry>\n        </property>\n\n        //properpies文件\n        <property name=\"pros\">\n            <props>\n                <prop key=\"key1\">value1</prop>\n                <prop key=\"key2\">value2</prop>\n            </props>\n        </property>\n    </bean>\n```\n- 构造方法注入----通过类的构造方法注入属性值\n```\n    <bean id=\"userDao1\" class=\"cn.itcast.spring.di.UserDao\">\n        <constructor-arg index=\"0\" value=\"小白\" />\n        <constructor-arg index=\"1\" value=\"20\" />\n    </bean>\n```\n\n#### 注解方式\n对于Bean属性的依赖注入分为两类，一类是对于属性是String类型或者基本数据类型Spring容器提供了@Value这个注解，另一类是对于属性是对象的提供了@Autowired和@Resource这两个注解。\n\n1．Resource注解:可以按照对象的类型注入，也可以按照对象的唯一标识注入\n  @Resource(name=\"userDao\")  //从工厂拿出userDao对象\n  \n2．AutoWired注解：只能按照对象的类型注入，如果需要按照对象的唯一标识注入，需要使用另外一个注解@Qualifier(value=\"userDao\")使用\n注意：Resource和AutoWired使用在属性上","slug":"spring/spring2","published":1,"updated":"2017-09-17T11:32:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhmwzqmv000e2fpzjbjlx6j1","content":"<h2 id=\"DI（依赖注入）\"><a href=\"#DI（依赖注入）\" class=\"headerlink\" title=\"DI（依赖注入）\"></a>DI（依赖注入）</h2><p>　　之前我们写一个web项目时，在Servlet类中创建Service对象，调用service中的方法处理业务逻辑，在Service类中，又创建Dao对象，调用dao中的方法处理访问数据库的逻辑，这样一层一层的向下调用。这样做的结果是，类与类之间的耦合度太高，DI的目的就是降低耦合度。<br><a id=\"more\"></a></p>\n<p>　　之前我们需要一个对象时，就得自己new一个新对象；现在我们把需要的类通过配置文件或注解方式放到spring工厂，它负责帮我们创建对象；我们在Servlet类中需要创建Service对象，可以说Servlet类依赖Service对象，现在有了Spring工厂，不需要我们创建Service对象，我们只需从Spring工厂拿Service对象即可，Spring工厂把Servlet类所依赖的Service对象给注入进来了，这就是依赖注入。<br>　　<br>依赖注入依然是两种方式：xml方式和注解方式</p>\n<h4 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h4><ul>\n<li>setter方法注入—为属性提供相应的setter方法，通过调用此方法注入属性值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;bean id=&quot;userDao2&quot; class=&quot;cn.itcast.spring.di.UserDao&quot;&gt;</div><div class=\"line\">        &lt;property name=&quot;name&quot; value=&quot;二麻子&quot; /&gt;</div><div class=\"line\">        &lt;property name=&quot;age&quot; value=&quot;88&quot; /&gt;</div><div class=\"line\">    &lt;/bean&gt;</div><div class=\"line\">    </div><div class=\"line\">    private List&lt;String&gt; list;</div><div class=\"line\">    private Set&lt;String&gt; set;</div><div class=\"line\">    private String[] strs;</div><div class=\"line\">    private Map&lt;String, String&gt; map;</div><div class=\"line\">    private Properties pros;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 使用setter方法注入集合类型的属性 --&gt;</div><div class=\"line\">    &lt;bean id=&quot;userDao4&quot; class=&quot;cn.itcast.spring.di.UserDao&quot;&gt;</div><div class=\"line\">        //List</div><div class=\"line\">        &lt;property name=&quot;list&quot;&gt;</div><div class=\"line\">            &lt;list&gt;</div><div class=\"line\">                &lt;value&gt;value1&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;value2&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;value3&lt;/value&gt;</div><div class=\"line\">            &lt;/list&gt;</div><div class=\"line\">        &lt;/property&gt;</div><div class=\"line\">        </div><div class=\"line\">        //Set</div><div class=\"line\">        &lt;property name=&quot;set&quot;&gt;</div><div class=\"line\">            &lt;set&gt;</div><div class=\"line\">                &lt;value&gt;v1&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;v2&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;v3&lt;/value&gt;</div><div class=\"line\">            &lt;/set&gt;</div><div class=\"line\">        &lt;/property&gt;</div><div class=\"line\"></div><div class=\"line\">        //数组</div><div class=\"line\">        &lt;property name=&quot;strs&quot;&gt;</div><div class=\"line\">            &lt;list&gt;</div><div class=\"line\">                &lt;value&gt;str1&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;str2&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;str3&lt;/value&gt;</div><div class=\"line\">            &lt;/list&gt;</div><div class=\"line\">        &lt;/property&gt;</div><div class=\"line\"></div><div class=\"line\">        //Map</div><div class=\"line\">        &lt;property name=&quot;map&quot;&gt;</div><div class=\"line\">            &lt;entry key=&quot;k1&quot; value=&quot;v1&quot;&gt;&lt;/entry&gt;</div><div class=\"line\">            &lt;entry key=&quot;k2&quot; value=&quot;v2&quot;&gt;&lt;/entry&gt;</div><div class=\"line\">            &lt;entry key=&quot;k3&quot; value=&quot;v3&quot;&gt;&lt;/entry&gt;</div><div class=\"line\">        &lt;/property&gt;</div><div class=\"line\"></div><div class=\"line\">        //properpies文件</div><div class=\"line\">        &lt;property name=&quot;pros&quot;&gt;</div><div class=\"line\">            &lt;props&gt;</div><div class=\"line\">                &lt;prop key=&quot;key1&quot;&gt;value1&lt;/prop&gt;</div><div class=\"line\">                &lt;prop key=&quot;key2&quot;&gt;value2&lt;/prop&gt;</div><div class=\"line\">            &lt;/props&gt;</div><div class=\"line\">        &lt;/property&gt;</div><div class=\"line\">    &lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>构造方法注入—-通过类的构造方法注入属性值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=&quot;userDao1&quot; class=&quot;cn.itcast.spring.di.UserDao&quot;&gt;</div><div class=\"line\">    &lt;constructor-arg index=&quot;0&quot; value=&quot;小白&quot; /&gt;</div><div class=\"line\">    &lt;constructor-arg index=&quot;1&quot; value=&quot;20&quot; /&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"注解方式-1\"><a href=\"#注解方式-1\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h4><p>对于Bean属性的依赖注入分为两类，一类是对于属性是String类型或者基本数据类型Spring容器提供了@Value这个注解，另一类是对于属性是对象的提供了@Autowired和@Resource这两个注解。</p>\n<p>1．Resource注解:可以按照对象的类型注入，也可以按照对象的唯一标识注入<br>  @Resource(name=”userDao”)  //从工厂拿出userDao对象</p>\n<p>2．AutoWired注解：只能按照对象的类型注入，如果需要按照对象的唯一标识注入，需要使用另外一个注解@Qualifier(value=”userDao”)使用<br>注意：Resource和AutoWired使用在属性上</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"DI（依赖注入）\"><a href=\"#DI（依赖注入）\" class=\"headerlink\" title=\"DI（依赖注入）\"></a>DI（依赖注入）</h2><p>　　之前我们写一个web项目时，在Servlet类中创建Service对象，调用service中的方法处理业务逻辑，在Service类中，又创建Dao对象，调用dao中的方法处理访问数据库的逻辑，这样一层一层的向下调用。这样做的结果是，类与类之间的耦合度太高，DI的目的就是降低耦合度。<br>","more":"</p>\n<p>　　之前我们需要一个对象时，就得自己new一个新对象；现在我们把需要的类通过配置文件或注解方式放到spring工厂，它负责帮我们创建对象；我们在Servlet类中需要创建Service对象，可以说Servlet类依赖Service对象，现在有了Spring工厂，不需要我们创建Service对象，我们只需从Spring工厂拿Service对象即可，Spring工厂把Servlet类所依赖的Service对象给注入进来了，这就是依赖注入。<br>　　<br>依赖注入依然是两种方式：xml方式和注解方式</p>\n<h4 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h4><ul>\n<li>setter方法注入—为属性提供相应的setter方法，通过调用此方法注入属性值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;bean id=&quot;userDao2&quot; class=&quot;cn.itcast.spring.di.UserDao&quot;&gt;</div><div class=\"line\">        &lt;property name=&quot;name&quot; value=&quot;二麻子&quot; /&gt;</div><div class=\"line\">        &lt;property name=&quot;age&quot; value=&quot;88&quot; /&gt;</div><div class=\"line\">    &lt;/bean&gt;</div><div class=\"line\">    </div><div class=\"line\">    private List&lt;String&gt; list;</div><div class=\"line\">    private Set&lt;String&gt; set;</div><div class=\"line\">    private String[] strs;</div><div class=\"line\">    private Map&lt;String, String&gt; map;</div><div class=\"line\">    private Properties pros;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 使用setter方法注入集合类型的属性 --&gt;</div><div class=\"line\">    &lt;bean id=&quot;userDao4&quot; class=&quot;cn.itcast.spring.di.UserDao&quot;&gt;</div><div class=\"line\">        //List</div><div class=\"line\">        &lt;property name=&quot;list&quot;&gt;</div><div class=\"line\">            &lt;list&gt;</div><div class=\"line\">                &lt;value&gt;value1&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;value2&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;value3&lt;/value&gt;</div><div class=\"line\">            &lt;/list&gt;</div><div class=\"line\">        &lt;/property&gt;</div><div class=\"line\">        </div><div class=\"line\">        //Set</div><div class=\"line\">        &lt;property name=&quot;set&quot;&gt;</div><div class=\"line\">            &lt;set&gt;</div><div class=\"line\">                &lt;value&gt;v1&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;v2&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;v3&lt;/value&gt;</div><div class=\"line\">            &lt;/set&gt;</div><div class=\"line\">        &lt;/property&gt;</div><div class=\"line\"></div><div class=\"line\">        //数组</div><div class=\"line\">        &lt;property name=&quot;strs&quot;&gt;</div><div class=\"line\">            &lt;list&gt;</div><div class=\"line\">                &lt;value&gt;str1&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;str2&lt;/value&gt;</div><div class=\"line\">                &lt;value&gt;str3&lt;/value&gt;</div><div class=\"line\">            &lt;/list&gt;</div><div class=\"line\">        &lt;/property&gt;</div><div class=\"line\"></div><div class=\"line\">        //Map</div><div class=\"line\">        &lt;property name=&quot;map&quot;&gt;</div><div class=\"line\">            &lt;entry key=&quot;k1&quot; value=&quot;v1&quot;&gt;&lt;/entry&gt;</div><div class=\"line\">            &lt;entry key=&quot;k2&quot; value=&quot;v2&quot;&gt;&lt;/entry&gt;</div><div class=\"line\">            &lt;entry key=&quot;k3&quot; value=&quot;v3&quot;&gt;&lt;/entry&gt;</div><div class=\"line\">        &lt;/property&gt;</div><div class=\"line\"></div><div class=\"line\">        //properpies文件</div><div class=\"line\">        &lt;property name=&quot;pros&quot;&gt;</div><div class=\"line\">            &lt;props&gt;</div><div class=\"line\">                &lt;prop key=&quot;key1&quot;&gt;value1&lt;/prop&gt;</div><div class=\"line\">                &lt;prop key=&quot;key2&quot;&gt;value2&lt;/prop&gt;</div><div class=\"line\">            &lt;/props&gt;</div><div class=\"line\">        &lt;/property&gt;</div><div class=\"line\">    &lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>构造方法注入—-通过类的构造方法注入属性值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=&quot;userDao1&quot; class=&quot;cn.itcast.spring.di.UserDao&quot;&gt;</div><div class=\"line\">    &lt;constructor-arg index=&quot;0&quot; value=&quot;小白&quot; /&gt;</div><div class=\"line\">    &lt;constructor-arg index=&quot;1&quot; value=&quot;20&quot; /&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"注解方式-1\"><a href=\"#注解方式-1\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h4><p>对于Bean属性的依赖注入分为两类，一类是对于属性是String类型或者基本数据类型Spring容器提供了@Value这个注解，另一类是对于属性是对象的提供了@Autowired和@Resource这两个注解。</p>\n<p>1．Resource注解:可以按照对象的类型注入，也可以按照对象的唯一标识注入<br>  @Resource(name=”userDao”)  //从工厂拿出userDao对象</p>\n<p>2．AutoWired注解：只能按照对象的类型注入，如果需要按照对象的唯一标识注入，需要使用另外一个注解@Qualifier(value=”userDao”)使用<br>注意：Resource和AutoWired使用在属性上</p>"},{"title":"spring总结（三）———— AOP","date":"2017-09-17T11:10:45.000Z","_content":"\n# AOP（面向切面编程）\n引用知乎上的一段话来解释AOP：\n<!--more-->\n> 这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。\n\n> AOP 实现的关键就在于 AOP 框架自动创建的 AOP 代理，AOP代理则可分为静态代理和动态代理两大类，其中静态代理是指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；而动态代理则在运行时借助于 JDK 动态代理、CGLIB 等在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。\nSpring AOP是运行时增强，而AspectJ是编译时增强。\n转载链接：http://www.jianshu.com/p/fe8d1e8bd63e\n\n## AOP相关术语解释\n+ JoinPoint(连接点)：被拦截的所有方法\n+ PointCut(切入点)：指我们对哪些JoinPoint拦截的定义\n+ Advice(通知)：指拦截到JoinPoint后所要做的事\n+ Target(目标对象)：代理的目标对象\n+ Proxy(代理对象)：一个类被AOP增强后，就产生一个结果代理类\n+ Aspect(切面)：是切点和通知的结合\n\n\n## 静态代理\n需要增强的类（目标对象），和增强了目标对象的类（代理对象）必须继承同一个接口。\n　　目标对象------实现上面的接口的一个实现类\n　　代理对象------实现上面的接口的一个实现类,持有目标对象的引用,在调用目标对象方法前后加入代码。\n但这样的弊端就是，每增强一个方法，都需要创建一个代理类，代码任务繁重。\n所以引入了自动代理，jvm自动帮我们生成代理类。\n\n## 动态代理的两种方式\n### JDK代理\n使用jdk的动态代理技术可以为指定的目标对象创建一个代理对象，**要求目标对象必须至少实现一个接口**\n```\n 　　　  // 创建一个目标对象\n\t\tfinal IUserDao target = new UserDaoImpl();\n\t\t// 为target创建一个代理对象\n\t\tIUserDao proxy = (IUserDao) Proxy.newProxyInstance(target.getClass()\n\t\t\t\t.getClassLoader(), target.getClass().getInterfaces(),\n\t\t\t\tnew InvocationHandler() {\n\t\t\t\t\t// 使用此方法在代理对象中拦截目标对象的方法\n\t\t\t\t\tpublic Object invoke(Object proxy, Method method,\n\t\t\t\t\t\t\tObject[] args) throws Throwable {\n\t\t\t\t\t\tObject object = method.invoke(target, args);// 调用目标对象的方法\n\t\t\t\t\t\tSystem.out.println(\"在代理对象中拦截到了一个目标对象的方法：\"\n\t\t\t\t\t\t\t\t+ method.getName());// 通知\n\t\t\t\t\t\treturn object;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t/*\n\t\t * proxy为代理类，执行下列三个方法，都会执行invoke方法，\n\t\t * 在该invoke方法中，先调用原先的方法，再打印一行字，增强了原对象方法\n\t\t */\n\t\tproxy.save(\"小明\");\n\t\tproxy.delete();\n\t\tproxy.update();\n```\n\n### cglib代理\n使用cglib创建代理对象，不要求目标对象必须实现接口，要求目标对象不能是final的类,**使用cglib创建的代理对象是目标对象类的一个子类对象**\n```\n //创建一个目标对象\n\tfinal UserDao target = new UserDao();\n\t//创建一个用于产生代理对象的实例\n\tEnhancer en = new Enhancer();\n    //指定为谁创建代理对象\n\ten.setSuperclass(target.getClass());\n\ten.setCallback(new MethodInterceptor() {\n    //拦截的方法\n    public Object intercept(Object obj, Method method, Object[] args,\n\t\tMethodProxy proxy) throws Throwable {\n\t\tSystem.out.println(\"在代理对象中拦截到了一个目标对象的方法：\" + method.getName());\n\t\treturn method.invoke(target, args);\n\t\t}\n\t\t});\n\t\t//创建代理对象\n\t\tUserDao proxy = (UserDao) en.create();\n\t\tproxy.save(\"xiaobai\");\n\t\tproxy.delete();\n\t\tproxy.update();\n```\n\n因Spring AOP使用效果不佳，不在此介绍，我们学习更优秀的**aspectJ框架**实现AOP\n\n# aspectJ(比Spring AOP更优秀的AOP实现框架)\n\n## 使用XML配置aspectJ\n1.在spring配置文件中引入aop的约束头信息\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\t   xmlns:context=\"http://www.springframework.org/schema/context\"\n\t   xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\t   xsi:schemaLocation=\" http://www.springframework.org/schema/beans \n       \t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\thttp://www.springframework.org/schema/context \n\t\t\t\thttp://www.springframework.org/schema/context/spring-context.xsd\n\t\t\t\thttp://www.springframework.org/schema/aop \n\t\t\t\thttp://www.springframework.org/schema/aop/spring-aop.xsd\n```\n2.在spring配置文件中开启aspectJ框架的自动代理功能\n```\n<!-- 开启自动代理功能 -->\n\t<aop:aspectj-autoproxy/>\n```\n3.编写一个目标类\n4.编写一个切面类\n5.在beans.xml中注册目标对象和切面类\n```\n\t<!-- 注册目标对象 -->\n\t<bean id=\"userDao\" class=\"cn.itcast.aop.aspectJ.xml.UserDao\"/>\n\t<!-- 注册切面类 -->\n\t<bean id=\"myAdvisor\" class=\"cn.itcast.aop.aspectJ.xml.MyAdvisor\"/>\n```\n6.使用框架提供的方式配置AOP切面\n```\n<!-- 使用xml方式配置aop切面 -->\n\t<aop:config>\n\t\t<!-- 切面 = 通知 +切点 -->\n\t\t<aop:aspect id=\"myAspect\" ref=\"myAdvisor\">\n\t\t\t<!-- 定义切点表达式 -->\n\t\t\t<aop:pointcut expression=\"execution(* cn.itcast.aop.aspectJ.xml.*Dao.*(..))\"\n\t\t\t\t id=\"myPointCut\"/>\n\t\t\t<!-- 前置通知 -->\n\t\t\t<aop:before method=\"before1\" pointcut-ref=\"myPointCut\"/>\n\t\t\t<!-- 后置通知 -->\n\t\t\t<aop:after-returning method=\"afterReturing1\" returning=\"ret\" pointcut-ref=\"myPointCut\"/>\n\t\t\t<!-- 环绕通知 -->\n\t\t\t<aop:around method=\"around1\" pointcut-ref=\"myPointCut\"/>\n\t\t\t<!-- 异常通知 -->\n\t\t\t<aop:after-throwing method=\"afterThrowing1\" throwing=\"ex\" pointcut-ref=\"myPointCut\"/>\n\t\t\t<!-- 最终通知 -->\n\t\t\t<aop:after method=\"after1\" pointcut-ref=\"myPointCut\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n```\n\n## 注解方式配置aspectJ\n1.在spring配置文件中引入aop的约束头信息\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\t   xmlns:context=\"http://www.springframework.org/schema/context\"\n\t   xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\t   xsi:schemaLocation=\" http://www.springframework.org/schema/beans \n       \t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\thttp://www.springframework.org/schema/context \n\t\t\t\thttp://www.springframework.org/schema/context/spring-context.xsd\t\t\t\t\t\n\t\t\t\thttp://www.springframework.org/schema/aop \t\t\t\t\t\t\n\t\t\t\thttp://www.springframework.org/schema/aop/spring-aop.xsd\n```\n2.在spring配置文件中开启aspectJ框架在自动代理功能\n```\n<!-- 开启自动代理功能 -->\n\t<aop:aspectj-autoproxy/>\n```\n3.编写一个目标类\n4.编写一个切面类，在类上使用@Aspect注解，在类的方法上使用@Before注解定义前置通知\n```\npublic class MyAdvisor {\t\n    @Pointcut(value=\"execution(* cn.hugang.aop.aspectJ.annotation.*Dao.*(..))\")\n\tpublic void myPointCut(){};\n\t\n\t// 定义一个前置通知方法,通过切点表达式描述要拦截的目标对象的方法\n\t@Before(value = \"MyAdvisor.myPointCut()\")//引用上面定义的切点表达式\n\tpublic void before1(JoinPoint jp) {            //连接点对象\n\t\t//System.out.println(\"【前置通知】拦截的的方法：\" + jp.getSignature().getName());\n\t}\n｝\n```\n5.在spring配置文件中注册目标对象和切面类\n6.读取spring配置文件，从spring工厂中获取一个代理对象\n```\n    ApplicationContext ctx = new ClassPathXmlApplicationContext(\"cn/hugang/aop/aspectJ/annotation/beans.xml\");\n\t\tUserDao userDao = (UserDao) ctx.getBean(\"userDao\");\n\t\tuserDao.save(\"\");\n\t\tuserDao.delete();\n\t\tuserDao.update();\n\t\tSystem.out.println(userDao.getClass().getSimpleName())\n```\n7.后置，环绕，异常，最终通知\n```\n\t//统一抽取一个切点表达式\n\t@Pointcut(value=\"execution(* cn.hugang.aop.aspectJ.annotation.*Dao.*(..))\")\n\tpublic void myPointCut(){};\n\t\n\t//后置通知\n//returning=\"ret\"   ret:拦截到的方法执行后的返回值\n\t@AfterReturning(value=\"MyAdvisor.myPointCut()\",returning=\"ret\")\n\tpublic void afterReturing1(JoinPoint jp,Object ret){\n\t\t//System.out.println(\"【后置通知】拦截的的方法：\" + jp.getSignature().getName() + \",此方法的执行结果为：\" + ret);\n\t}\n\t\n\t//环绕通知\n\t@Around(value=\"MyAdvisor.myPointCut()\")\n\tpublic Object around1(ProceedingJoinPoint pjp) throws Throwable{\n\t\t//System.out.println(\"【环绕通知】前\");\n\t\t//必须在环绕通知中手动调用目标对象的方法，否则目标对象的方法将被拦截，不会执行\n\t\tObject value = pjp.proceed();//调用目标对象的方法\n\t\t//System.out.println(\"【环绕通知】后\");\n\t\treturn value;\n\t}\n\t\n\t//异常通知\n\t@AfterThrowing(value=\"MyAdvisor.myPointCut()\",throwing=\"ex\")  //ex:异常的信息\n\tpublic void afterThrowing1(JoinPoint jp,Throwable ex){\n\t\tSystem.out.println(\"【异常通知】执行了，拦截到的目标方法为：\" + jp.getSignature().getName() + \",异常信息为：\" + ex);\n\t}\n\n\t//最终通知\n\t@After(value=\"MyAdvisor.myPointCut()\")\n\tpublic void after1(JoinPoint jp){\n\t\tSystem.out.println(\"【最终通知】拦截到目标方法：\" + jp.getSignature().getName());\n\t}\n```","source":"_posts/spring/spring3.md","raw":"---\ntitle: spring总结（三）———— AOP\ndate: 2017-09-17 19:10:45\ntags: JavaEE框架\ncategories: spring\n---\n\n# AOP（面向切面编程）\n引用知乎上的一段话来解释AOP：\n<!--more-->\n> 这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。\n\n> AOP 实现的关键就在于 AOP 框架自动创建的 AOP 代理，AOP代理则可分为静态代理和动态代理两大类，其中静态代理是指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；而动态代理则在运行时借助于 JDK 动态代理、CGLIB 等在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。\nSpring AOP是运行时增强，而AspectJ是编译时增强。\n转载链接：http://www.jianshu.com/p/fe8d1e8bd63e\n\n## AOP相关术语解释\n+ JoinPoint(连接点)：被拦截的所有方法\n+ PointCut(切入点)：指我们对哪些JoinPoint拦截的定义\n+ Advice(通知)：指拦截到JoinPoint后所要做的事\n+ Target(目标对象)：代理的目标对象\n+ Proxy(代理对象)：一个类被AOP增强后，就产生一个结果代理类\n+ Aspect(切面)：是切点和通知的结合\n\n\n## 静态代理\n需要增强的类（目标对象），和增强了目标对象的类（代理对象）必须继承同一个接口。\n　　目标对象------实现上面的接口的一个实现类\n　　代理对象------实现上面的接口的一个实现类,持有目标对象的引用,在调用目标对象方法前后加入代码。\n但这样的弊端就是，每增强一个方法，都需要创建一个代理类，代码任务繁重。\n所以引入了自动代理，jvm自动帮我们生成代理类。\n\n## 动态代理的两种方式\n### JDK代理\n使用jdk的动态代理技术可以为指定的目标对象创建一个代理对象，**要求目标对象必须至少实现一个接口**\n```\n 　　　  // 创建一个目标对象\n\t\tfinal IUserDao target = new UserDaoImpl();\n\t\t// 为target创建一个代理对象\n\t\tIUserDao proxy = (IUserDao) Proxy.newProxyInstance(target.getClass()\n\t\t\t\t.getClassLoader(), target.getClass().getInterfaces(),\n\t\t\t\tnew InvocationHandler() {\n\t\t\t\t\t// 使用此方法在代理对象中拦截目标对象的方法\n\t\t\t\t\tpublic Object invoke(Object proxy, Method method,\n\t\t\t\t\t\t\tObject[] args) throws Throwable {\n\t\t\t\t\t\tObject object = method.invoke(target, args);// 调用目标对象的方法\n\t\t\t\t\t\tSystem.out.println(\"在代理对象中拦截到了一个目标对象的方法：\"\n\t\t\t\t\t\t\t\t+ method.getName());// 通知\n\t\t\t\t\t\treturn object;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t/*\n\t\t * proxy为代理类，执行下列三个方法，都会执行invoke方法，\n\t\t * 在该invoke方法中，先调用原先的方法，再打印一行字，增强了原对象方法\n\t\t */\n\t\tproxy.save(\"小明\");\n\t\tproxy.delete();\n\t\tproxy.update();\n```\n\n### cglib代理\n使用cglib创建代理对象，不要求目标对象必须实现接口，要求目标对象不能是final的类,**使用cglib创建的代理对象是目标对象类的一个子类对象**\n```\n //创建一个目标对象\n\tfinal UserDao target = new UserDao();\n\t//创建一个用于产生代理对象的实例\n\tEnhancer en = new Enhancer();\n    //指定为谁创建代理对象\n\ten.setSuperclass(target.getClass());\n\ten.setCallback(new MethodInterceptor() {\n    //拦截的方法\n    public Object intercept(Object obj, Method method, Object[] args,\n\t\tMethodProxy proxy) throws Throwable {\n\t\tSystem.out.println(\"在代理对象中拦截到了一个目标对象的方法：\" + method.getName());\n\t\treturn method.invoke(target, args);\n\t\t}\n\t\t});\n\t\t//创建代理对象\n\t\tUserDao proxy = (UserDao) en.create();\n\t\tproxy.save(\"xiaobai\");\n\t\tproxy.delete();\n\t\tproxy.update();\n```\n\n因Spring AOP使用效果不佳，不在此介绍，我们学习更优秀的**aspectJ框架**实现AOP\n\n# aspectJ(比Spring AOP更优秀的AOP实现框架)\n\n## 使用XML配置aspectJ\n1.在spring配置文件中引入aop的约束头信息\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\t   xmlns:context=\"http://www.springframework.org/schema/context\"\n\t   xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\t   xsi:schemaLocation=\" http://www.springframework.org/schema/beans \n       \t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\thttp://www.springframework.org/schema/context \n\t\t\t\thttp://www.springframework.org/schema/context/spring-context.xsd\n\t\t\t\thttp://www.springframework.org/schema/aop \n\t\t\t\thttp://www.springframework.org/schema/aop/spring-aop.xsd\n```\n2.在spring配置文件中开启aspectJ框架的自动代理功能\n```\n<!-- 开启自动代理功能 -->\n\t<aop:aspectj-autoproxy/>\n```\n3.编写一个目标类\n4.编写一个切面类\n5.在beans.xml中注册目标对象和切面类\n```\n\t<!-- 注册目标对象 -->\n\t<bean id=\"userDao\" class=\"cn.itcast.aop.aspectJ.xml.UserDao\"/>\n\t<!-- 注册切面类 -->\n\t<bean id=\"myAdvisor\" class=\"cn.itcast.aop.aspectJ.xml.MyAdvisor\"/>\n```\n6.使用框架提供的方式配置AOP切面\n```\n<!-- 使用xml方式配置aop切面 -->\n\t<aop:config>\n\t\t<!-- 切面 = 通知 +切点 -->\n\t\t<aop:aspect id=\"myAspect\" ref=\"myAdvisor\">\n\t\t\t<!-- 定义切点表达式 -->\n\t\t\t<aop:pointcut expression=\"execution(* cn.itcast.aop.aspectJ.xml.*Dao.*(..))\"\n\t\t\t\t id=\"myPointCut\"/>\n\t\t\t<!-- 前置通知 -->\n\t\t\t<aop:before method=\"before1\" pointcut-ref=\"myPointCut\"/>\n\t\t\t<!-- 后置通知 -->\n\t\t\t<aop:after-returning method=\"afterReturing1\" returning=\"ret\" pointcut-ref=\"myPointCut\"/>\n\t\t\t<!-- 环绕通知 -->\n\t\t\t<aop:around method=\"around1\" pointcut-ref=\"myPointCut\"/>\n\t\t\t<!-- 异常通知 -->\n\t\t\t<aop:after-throwing method=\"afterThrowing1\" throwing=\"ex\" pointcut-ref=\"myPointCut\"/>\n\t\t\t<!-- 最终通知 -->\n\t\t\t<aop:after method=\"after1\" pointcut-ref=\"myPointCut\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n```\n\n## 注解方式配置aspectJ\n1.在spring配置文件中引入aop的约束头信息\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\t   xmlns:context=\"http://www.springframework.org/schema/context\"\n\t   xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\t   xsi:schemaLocation=\" http://www.springframework.org/schema/beans \n       \t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\thttp://www.springframework.org/schema/context \n\t\t\t\thttp://www.springframework.org/schema/context/spring-context.xsd\t\t\t\t\t\n\t\t\t\thttp://www.springframework.org/schema/aop \t\t\t\t\t\t\n\t\t\t\thttp://www.springframework.org/schema/aop/spring-aop.xsd\n```\n2.在spring配置文件中开启aspectJ框架在自动代理功能\n```\n<!-- 开启自动代理功能 -->\n\t<aop:aspectj-autoproxy/>\n```\n3.编写一个目标类\n4.编写一个切面类，在类上使用@Aspect注解，在类的方法上使用@Before注解定义前置通知\n```\npublic class MyAdvisor {\t\n    @Pointcut(value=\"execution(* cn.hugang.aop.aspectJ.annotation.*Dao.*(..))\")\n\tpublic void myPointCut(){};\n\t\n\t// 定义一个前置通知方法,通过切点表达式描述要拦截的目标对象的方法\n\t@Before(value = \"MyAdvisor.myPointCut()\")//引用上面定义的切点表达式\n\tpublic void before1(JoinPoint jp) {            //连接点对象\n\t\t//System.out.println(\"【前置通知】拦截的的方法：\" + jp.getSignature().getName());\n\t}\n｝\n```\n5.在spring配置文件中注册目标对象和切面类\n6.读取spring配置文件，从spring工厂中获取一个代理对象\n```\n    ApplicationContext ctx = new ClassPathXmlApplicationContext(\"cn/hugang/aop/aspectJ/annotation/beans.xml\");\n\t\tUserDao userDao = (UserDao) ctx.getBean(\"userDao\");\n\t\tuserDao.save(\"\");\n\t\tuserDao.delete();\n\t\tuserDao.update();\n\t\tSystem.out.println(userDao.getClass().getSimpleName())\n```\n7.后置，环绕，异常，最终通知\n```\n\t//统一抽取一个切点表达式\n\t@Pointcut(value=\"execution(* cn.hugang.aop.aspectJ.annotation.*Dao.*(..))\")\n\tpublic void myPointCut(){};\n\t\n\t//后置通知\n//returning=\"ret\"   ret:拦截到的方法执行后的返回值\n\t@AfterReturning(value=\"MyAdvisor.myPointCut()\",returning=\"ret\")\n\tpublic void afterReturing1(JoinPoint jp,Object ret){\n\t\t//System.out.println(\"【后置通知】拦截的的方法：\" + jp.getSignature().getName() + \",此方法的执行结果为：\" + ret);\n\t}\n\t\n\t//环绕通知\n\t@Around(value=\"MyAdvisor.myPointCut()\")\n\tpublic Object around1(ProceedingJoinPoint pjp) throws Throwable{\n\t\t//System.out.println(\"【环绕通知】前\");\n\t\t//必须在环绕通知中手动调用目标对象的方法，否则目标对象的方法将被拦截，不会执行\n\t\tObject value = pjp.proceed();//调用目标对象的方法\n\t\t//System.out.println(\"【环绕通知】后\");\n\t\treturn value;\n\t}\n\t\n\t//异常通知\n\t@AfterThrowing(value=\"MyAdvisor.myPointCut()\",throwing=\"ex\")  //ex:异常的信息\n\tpublic void afterThrowing1(JoinPoint jp,Throwable ex){\n\t\tSystem.out.println(\"【异常通知】执行了，拦截到的目标方法为：\" + jp.getSignature().getName() + \",异常信息为：\" + ex);\n\t}\n\n\t//最终通知\n\t@After(value=\"MyAdvisor.myPointCut()\")\n\tpublic void after1(JoinPoint jp){\n\t\tSystem.out.println(\"【最终通知】拦截到目标方法：\" + jp.getSignature().getName());\n\t}\n```","slug":"spring/spring3","published":1,"updated":"2017-09-17T12:25:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhmwzqna000n2fpz31ng82oq","content":"<h1 id=\"AOP（面向切面编程）\"><a href=\"#AOP（面向切面编程）\" class=\"headerlink\" title=\"AOP（面向切面编程）\"></a>AOP（面向切面编程）</h1><p>引用知乎上的一段话来解释AOP：<br><a id=\"more\"></a></p>\n<blockquote>\n<p>这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。</p>\n<p>AOP 实现的关键就在于 AOP 框架自动创建的 AOP 代理，AOP代理则可分为静态代理和动态代理两大类，其中静态代理是指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；而动态代理则在运行时借助于 JDK 动态代理、CGLIB 等在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。<br>Spring AOP是运行时增强，而AspectJ是编译时增强。<br>转载链接：<a href=\"http://www.jianshu.com/p/fe8d1e8bd63e\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/fe8d1e8bd63e</a></p>\n</blockquote>\n<h2 id=\"AOP相关术语解释\"><a href=\"#AOP相关术语解释\" class=\"headerlink\" title=\"AOP相关术语解释\"></a>AOP相关术语解释</h2><ul>\n<li>JoinPoint(连接点)：被拦截的所有方法</li>\n<li>PointCut(切入点)：指我们对哪些JoinPoint拦截的定义</li>\n<li>Advice(通知)：指拦截到JoinPoint后所要做的事</li>\n<li>Target(目标对象)：代理的目标对象</li>\n<li>Proxy(代理对象)：一个类被AOP增强后，就产生一个结果代理类</li>\n<li>Aspect(切面)：是切点和通知的结合</li>\n</ul>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>需要增强的类（目标对象），和增强了目标对象的类（代理对象）必须继承同一个接口。<br>　　目标对象——实现上面的接口的一个实现类<br>　　代理对象——实现上面的接口的一个实现类,持有目标对象的引用,在调用目标对象方法前后加入代码。<br>但这样的弊端就是，每增强一个方法，都需要创建一个代理类，代码任务繁重。<br>所以引入了自动代理，jvm自动帮我们生成代理类。</p>\n<h2 id=\"动态代理的两种方式\"><a href=\"#动态代理的两种方式\" class=\"headerlink\" title=\"动态代理的两种方式\"></a>动态代理的两种方式</h2><h3 id=\"JDK代理\"><a href=\"#JDK代理\" class=\"headerlink\" title=\"JDK代理\"></a>JDK代理</h3><p>使用jdk的动态代理技术可以为指定的目标对象创建一个代理对象，<strong>要求目标对象必须至少实现一个接口</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"> 　　　  // 创建一个目标对象</div><div class=\"line\">final IUserDao target = new UserDaoImpl();</div><div class=\"line\">// 为target创建一个代理对象</div><div class=\"line\">IUserDao proxy = (IUserDao) Proxy.newProxyInstance(target.getClass()</div><div class=\"line\">\t\t.getClassLoader(), target.getClass().getInterfaces(),</div><div class=\"line\">\t\tnew InvocationHandler() &#123;</div><div class=\"line\">\t\t\t// 使用此方法在代理对象中拦截目标对象的方法</div><div class=\"line\">\t\t\tpublic Object invoke(Object proxy, Method method,</div><div class=\"line\">\t\t\t\t\tObject[] args) throws Throwable &#123;</div><div class=\"line\">\t\t\t\tObject object = method.invoke(target, args);// 调用目标对象的方法</div><div class=\"line\">\t\t\t\tSystem.out.println(&quot;在代理对象中拦截到了一个目标对象的方法：&quot;</div><div class=\"line\">\t\t\t\t\t\t+ method.getName());// 通知</div><div class=\"line\">\t\t\t\treturn object;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">/*</div><div class=\"line\"> * proxy为代理类，执行下列三个方法，都会执行invoke方法，</div><div class=\"line\"> * 在该invoke方法中，先调用原先的方法，再打印一行字，增强了原对象方法</div><div class=\"line\"> */</div><div class=\"line\">proxy.save(&quot;小明&quot;);</div><div class=\"line\">proxy.delete();</div><div class=\"line\">proxy.update();</div></pre></td></tr></table></figure></p>\n<h3 id=\"cglib代理\"><a href=\"#cglib代理\" class=\"headerlink\" title=\"cglib代理\"></a>cglib代理</h3><p>使用cglib创建代理对象，不要求目标对象必须实现接口，要求目标对象不能是final的类,<strong>使用cglib创建的代理对象是目标对象类的一个子类对象</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建一个目标对象</div><div class=\"line\">final UserDao target = new UserDao();</div><div class=\"line\">//创建一个用于产生代理对象的实例</div><div class=\"line\">Enhancer en = new Enhancer();</div><div class=\"line\">   //指定为谁创建代理对象</div><div class=\"line\">en.setSuperclass(target.getClass());</div><div class=\"line\">en.setCallback(new MethodInterceptor() &#123;</div><div class=\"line\">   //拦截的方法</div><div class=\"line\">   public Object intercept(Object obj, Method method, Object[] args,</div><div class=\"line\">\tMethodProxy proxy) throws Throwable &#123;</div><div class=\"line\">\tSystem.out.println(&quot;在代理对象中拦截到了一个目标对象的方法：&quot; + method.getName());</div><div class=\"line\">\treturn method.invoke(target, args);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t//创建代理对象</div><div class=\"line\">\tUserDao proxy = (UserDao) en.create();</div><div class=\"line\">\tproxy.save(&quot;xiaobai&quot;);</div><div class=\"line\">\tproxy.delete();</div><div class=\"line\">\tproxy.update();</div></pre></td></tr></table></figure></p>\n<p>因Spring AOP使用效果不佳，不在此介绍，我们学习更优秀的<strong>aspectJ框架</strong>实现AOP</p>\n<h1 id=\"aspectJ-比Spring-AOP更优秀的AOP实现框架\"><a href=\"#aspectJ-比Spring-AOP更优秀的AOP实现框架\" class=\"headerlink\" title=\"aspectJ(比Spring AOP更优秀的AOP实现框架)\"></a>aspectJ(比Spring AOP更优秀的AOP实现框架)</h1><h2 id=\"使用XML配置aspectJ\"><a href=\"#使用XML配置aspectJ\" class=\"headerlink\" title=\"使用XML配置aspectJ\"></a>使用XML配置aspectJ</h2><p>1.在spring配置文件中引入aop的约束头信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\t   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class=\"line\">\t   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">\t   xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\t   xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans </div><div class=\"line\">       \t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/context </div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/context/spring-context.xsd</div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/aop </div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/aop/spring-aop.xsd</div></pre></td></tr></table></figure></p>\n<p>2.在spring配置文件中开启aspectJ框架的自动代理功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 开启自动代理功能 --&gt;</div><div class=\"line\">\t&lt;aop:aspectj-autoproxy/&gt;</div></pre></td></tr></table></figure></p>\n<p>3.编写一个目标类<br>4.编写一个切面类<br>5.在beans.xml中注册目标对象和切面类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 注册目标对象 --&gt;</div><div class=\"line\">&lt;bean id=&quot;userDao&quot; class=&quot;cn.itcast.aop.aspectJ.xml.UserDao&quot;/&gt;</div><div class=\"line\">&lt;!-- 注册切面类 --&gt;</div><div class=\"line\">&lt;bean id=&quot;myAdvisor&quot; class=&quot;cn.itcast.aop.aspectJ.xml.MyAdvisor&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<p>6.使用框架提供的方式配置AOP切面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 使用xml方式配置aop切面 --&gt;</div><div class=\"line\">\t&lt;aop:config&gt;</div><div class=\"line\">\t\t&lt;!-- 切面 = 通知 +切点 --&gt;</div><div class=\"line\">\t\t&lt;aop:aspect id=&quot;myAspect&quot; ref=&quot;myAdvisor&quot;&gt;</div><div class=\"line\">\t\t\t&lt;!-- 定义切点表达式 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:pointcut expression=&quot;execution(* cn.itcast.aop.aspectJ.xml.*Dao.*(..))&quot;</div><div class=\"line\">\t\t\t\t id=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;!-- 前置通知 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:before method=&quot;before1&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;!-- 后置通知 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:after-returning method=&quot;afterReturing1&quot; returning=&quot;ret&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;!-- 环绕通知 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:around method=&quot;around1&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;!-- 异常通知 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:after-throwing method=&quot;afterThrowing1&quot; throwing=&quot;ex&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;!-- 最终通知 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:after method=&quot;after1&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t&lt;/aop:aspect&gt;</div><div class=\"line\">\t&lt;/aop:config&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"注解方式配置aspectJ\"><a href=\"#注解方式配置aspectJ\" class=\"headerlink\" title=\"注解方式配置aspectJ\"></a>注解方式配置aspectJ</h2><p>1.在spring配置文件中引入aop的约束头信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\t   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class=\"line\">\t   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">\t   xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\t   xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans </div><div class=\"line\">       \t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/context </div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/context/spring-context.xsd\t\t\t\t\t</div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/aop \t\t\t\t\t\t</div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/aop/spring-aop.xsd</div></pre></td></tr></table></figure></p>\n<p>2.在spring配置文件中开启aspectJ框架在自动代理功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 开启自动代理功能 --&gt;</div><div class=\"line\">\t&lt;aop:aspectj-autoproxy/&gt;</div></pre></td></tr></table></figure></p>\n<p>3.编写一个目标类<br>4.编写一个切面类，在类上使用@Aspect注解，在类的方法上使用@Before注解定义前置通知<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MyAdvisor &#123;\t</div><div class=\"line\">    @Pointcut(value=&quot;execution(* cn.hugang.aop.aspectJ.annotation.*Dao.*(..))&quot;)</div><div class=\"line\">\tpublic void myPointCut()&#123;&#125;;</div><div class=\"line\">\t</div><div class=\"line\">\t// 定义一个前置通知方法,通过切点表达式描述要拦截的目标对象的方法</div><div class=\"line\">\t@Before(value = &quot;MyAdvisor.myPointCut()&quot;)//引用上面定义的切点表达式</div><div class=\"line\">\tpublic void before1(JoinPoint jp) &#123;            //连接点对象</div><div class=\"line\">\t\t//System.out.println(&quot;【前置通知】拦截的的方法：&quot; + jp.getSignature().getName());</div><div class=\"line\">\t&#125;</div><div class=\"line\">｝</div></pre></td></tr></table></figure></p>\n<p>5.在spring配置文件中注册目标对象和切面类<br>6.读取spring配置文件，从spring工厂中获取一个代理对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;cn/hugang/aop/aspectJ/annotation/beans.xml&quot;);</div><div class=\"line\">UserDao userDao = (UserDao) ctx.getBean(&quot;userDao&quot;);</div><div class=\"line\">userDao.save(&quot;&quot;);</div><div class=\"line\">userDao.delete();</div><div class=\"line\">userDao.update();</div><div class=\"line\">System.out.println(userDao.getClass().getSimpleName())</div></pre></td></tr></table></figure></p>\n<p>7.后置，环绕，异常，最终通知<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t//统一抽取一个切点表达式</div><div class=\"line\">\t@Pointcut(value=&quot;execution(* cn.hugang.aop.aspectJ.annotation.*Dao.*(..))&quot;)</div><div class=\"line\">\tpublic void myPointCut()&#123;&#125;;</div><div class=\"line\">\t</div><div class=\"line\">\t//后置通知</div><div class=\"line\">//returning=&quot;ret&quot;   ret:拦截到的方法执行后的返回值</div><div class=\"line\">\t@AfterReturning(value=&quot;MyAdvisor.myPointCut()&quot;,returning=&quot;ret&quot;)</div><div class=\"line\">\tpublic void afterReturing1(JoinPoint jp,Object ret)&#123;</div><div class=\"line\">\t\t//System.out.println(&quot;【后置通知】拦截的的方法：&quot; + jp.getSignature().getName() + &quot;,此方法的执行结果为：&quot; + ret);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t//环绕通知</div><div class=\"line\">\t@Around(value=&quot;MyAdvisor.myPointCut()&quot;)</div><div class=\"line\">\tpublic Object around1(ProceedingJoinPoint pjp) throws Throwable&#123;</div><div class=\"line\">\t\t//System.out.println(&quot;【环绕通知】前&quot;);</div><div class=\"line\">\t\t//必须在环绕通知中手动调用目标对象的方法，否则目标对象的方法将被拦截，不会执行</div><div class=\"line\">\t\tObject value = pjp.proceed();//调用目标对象的方法</div><div class=\"line\">\t\t//System.out.println(&quot;【环绕通知】后&quot;);</div><div class=\"line\">\t\treturn value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t//异常通知</div><div class=\"line\">\t@AfterThrowing(value=&quot;MyAdvisor.myPointCut()&quot;,throwing=&quot;ex&quot;)  //ex:异常的信息</div><div class=\"line\">\tpublic void afterThrowing1(JoinPoint jp,Throwable ex)&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;【异常通知】执行了，拦截到的目标方法为：&quot; + jp.getSignature().getName() + &quot;,异常信息为：&quot; + ex);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t//最终通知</div><div class=\"line\">\t@After(value=&quot;MyAdvisor.myPointCut()&quot;)</div><div class=\"line\">\tpublic void after1(JoinPoint jp)&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;【最终通知】拦截到目标方法：&quot; + jp.getSignature().getName());</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"AOP（面向切面编程）\"><a href=\"#AOP（面向切面编程）\" class=\"headerlink\" title=\"AOP（面向切面编程）\"></a>AOP（面向切面编程）</h1><p>引用知乎上的一段话来解释AOP：<br>","more":"</p>\n<blockquote>\n<p>这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。</p>\n<p>AOP 实现的关键就在于 AOP 框架自动创建的 AOP 代理，AOP代理则可分为静态代理和动态代理两大类，其中静态代理是指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；而动态代理则在运行时借助于 JDK 动态代理、CGLIB 等在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。<br>Spring AOP是运行时增强，而AspectJ是编译时增强。<br>转载链接：<a href=\"http://www.jianshu.com/p/fe8d1e8bd63e\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/fe8d1e8bd63e</a></p>\n</blockquote>\n<h2 id=\"AOP相关术语解释\"><a href=\"#AOP相关术语解释\" class=\"headerlink\" title=\"AOP相关术语解释\"></a>AOP相关术语解释</h2><ul>\n<li>JoinPoint(连接点)：被拦截的所有方法</li>\n<li>PointCut(切入点)：指我们对哪些JoinPoint拦截的定义</li>\n<li>Advice(通知)：指拦截到JoinPoint后所要做的事</li>\n<li>Target(目标对象)：代理的目标对象</li>\n<li>Proxy(代理对象)：一个类被AOP增强后，就产生一个结果代理类</li>\n<li>Aspect(切面)：是切点和通知的结合</li>\n</ul>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>需要增强的类（目标对象），和增强了目标对象的类（代理对象）必须继承同一个接口。<br>　　目标对象——实现上面的接口的一个实现类<br>　　代理对象——实现上面的接口的一个实现类,持有目标对象的引用,在调用目标对象方法前后加入代码。<br>但这样的弊端就是，每增强一个方法，都需要创建一个代理类，代码任务繁重。<br>所以引入了自动代理，jvm自动帮我们生成代理类。</p>\n<h2 id=\"动态代理的两种方式\"><a href=\"#动态代理的两种方式\" class=\"headerlink\" title=\"动态代理的两种方式\"></a>动态代理的两种方式</h2><h3 id=\"JDK代理\"><a href=\"#JDK代理\" class=\"headerlink\" title=\"JDK代理\"></a>JDK代理</h3><p>使用jdk的动态代理技术可以为指定的目标对象创建一个代理对象，<strong>要求目标对象必须至少实现一个接口</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"> 　　　  // 创建一个目标对象</div><div class=\"line\">final IUserDao target = new UserDaoImpl();</div><div class=\"line\">// 为target创建一个代理对象</div><div class=\"line\">IUserDao proxy = (IUserDao) Proxy.newProxyInstance(target.getClass()</div><div class=\"line\">\t\t.getClassLoader(), target.getClass().getInterfaces(),</div><div class=\"line\">\t\tnew InvocationHandler() &#123;</div><div class=\"line\">\t\t\t// 使用此方法在代理对象中拦截目标对象的方法</div><div class=\"line\">\t\t\tpublic Object invoke(Object proxy, Method method,</div><div class=\"line\">\t\t\t\t\tObject[] args) throws Throwable &#123;</div><div class=\"line\">\t\t\t\tObject object = method.invoke(target, args);// 调用目标对象的方法</div><div class=\"line\">\t\t\t\tSystem.out.println(&quot;在代理对象中拦截到了一个目标对象的方法：&quot;</div><div class=\"line\">\t\t\t\t\t\t+ method.getName());// 通知</div><div class=\"line\">\t\t\t\treturn object;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">/*</div><div class=\"line\"> * proxy为代理类，执行下列三个方法，都会执行invoke方法，</div><div class=\"line\"> * 在该invoke方法中，先调用原先的方法，再打印一行字，增强了原对象方法</div><div class=\"line\"> */</div><div class=\"line\">proxy.save(&quot;小明&quot;);</div><div class=\"line\">proxy.delete();</div><div class=\"line\">proxy.update();</div></pre></td></tr></table></figure></p>\n<h3 id=\"cglib代理\"><a href=\"#cglib代理\" class=\"headerlink\" title=\"cglib代理\"></a>cglib代理</h3><p>使用cglib创建代理对象，不要求目标对象必须实现接口，要求目标对象不能是final的类,<strong>使用cglib创建的代理对象是目标对象类的一个子类对象</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建一个目标对象</div><div class=\"line\">final UserDao target = new UserDao();</div><div class=\"line\">//创建一个用于产生代理对象的实例</div><div class=\"line\">Enhancer en = new Enhancer();</div><div class=\"line\">   //指定为谁创建代理对象</div><div class=\"line\">en.setSuperclass(target.getClass());</div><div class=\"line\">en.setCallback(new MethodInterceptor() &#123;</div><div class=\"line\">   //拦截的方法</div><div class=\"line\">   public Object intercept(Object obj, Method method, Object[] args,</div><div class=\"line\">\tMethodProxy proxy) throws Throwable &#123;</div><div class=\"line\">\tSystem.out.println(&quot;在代理对象中拦截到了一个目标对象的方法：&quot; + method.getName());</div><div class=\"line\">\treturn method.invoke(target, args);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t//创建代理对象</div><div class=\"line\">\tUserDao proxy = (UserDao) en.create();</div><div class=\"line\">\tproxy.save(&quot;xiaobai&quot;);</div><div class=\"line\">\tproxy.delete();</div><div class=\"line\">\tproxy.update();</div></pre></td></tr></table></figure></p>\n<p>因Spring AOP使用效果不佳，不在此介绍，我们学习更优秀的<strong>aspectJ框架</strong>实现AOP</p>\n<h1 id=\"aspectJ-比Spring-AOP更优秀的AOP实现框架\"><a href=\"#aspectJ-比Spring-AOP更优秀的AOP实现框架\" class=\"headerlink\" title=\"aspectJ(比Spring AOP更优秀的AOP实现框架)\"></a>aspectJ(比Spring AOP更优秀的AOP实现框架)</h1><h2 id=\"使用XML配置aspectJ\"><a href=\"#使用XML配置aspectJ\" class=\"headerlink\" title=\"使用XML配置aspectJ\"></a>使用XML配置aspectJ</h2><p>1.在spring配置文件中引入aop的约束头信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\t   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class=\"line\">\t   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">\t   xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\t   xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans </div><div class=\"line\">       \t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/context </div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/context/spring-context.xsd</div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/aop </div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/aop/spring-aop.xsd</div></pre></td></tr></table></figure></p>\n<p>2.在spring配置文件中开启aspectJ框架的自动代理功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 开启自动代理功能 --&gt;</div><div class=\"line\">\t&lt;aop:aspectj-autoproxy/&gt;</div></pre></td></tr></table></figure></p>\n<p>3.编写一个目标类<br>4.编写一个切面类<br>5.在beans.xml中注册目标对象和切面类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 注册目标对象 --&gt;</div><div class=\"line\">&lt;bean id=&quot;userDao&quot; class=&quot;cn.itcast.aop.aspectJ.xml.UserDao&quot;/&gt;</div><div class=\"line\">&lt;!-- 注册切面类 --&gt;</div><div class=\"line\">&lt;bean id=&quot;myAdvisor&quot; class=&quot;cn.itcast.aop.aspectJ.xml.MyAdvisor&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<p>6.使用框架提供的方式配置AOP切面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 使用xml方式配置aop切面 --&gt;</div><div class=\"line\">\t&lt;aop:config&gt;</div><div class=\"line\">\t\t&lt;!-- 切面 = 通知 +切点 --&gt;</div><div class=\"line\">\t\t&lt;aop:aspect id=&quot;myAspect&quot; ref=&quot;myAdvisor&quot;&gt;</div><div class=\"line\">\t\t\t&lt;!-- 定义切点表达式 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:pointcut expression=&quot;execution(* cn.itcast.aop.aspectJ.xml.*Dao.*(..))&quot;</div><div class=\"line\">\t\t\t\t id=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;!-- 前置通知 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:before method=&quot;before1&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;!-- 后置通知 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:after-returning method=&quot;afterReturing1&quot; returning=&quot;ret&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;!-- 环绕通知 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:around method=&quot;around1&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;!-- 异常通知 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:after-throwing method=&quot;afterThrowing1&quot; throwing=&quot;ex&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t\t&lt;!-- 最终通知 --&gt;</div><div class=\"line\">\t\t\t&lt;aop:after method=&quot;after1&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</div><div class=\"line\">\t\t&lt;/aop:aspect&gt;</div><div class=\"line\">\t&lt;/aop:config&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"注解方式配置aspectJ\"><a href=\"#注解方式配置aspectJ\" class=\"headerlink\" title=\"注解方式配置aspectJ\"></a>注解方式配置aspectJ</h2><p>1.在spring配置文件中引入aop的约束头信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\t   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class=\"line\">\t   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class=\"line\">\t   xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\t   xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans </div><div class=\"line\">       \t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/context </div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/context/spring-context.xsd\t\t\t\t\t</div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/aop \t\t\t\t\t\t</div><div class=\"line\">\t\t\t\thttp://www.springframework.org/schema/aop/spring-aop.xsd</div></pre></td></tr></table></figure></p>\n<p>2.在spring配置文件中开启aspectJ框架在自动代理功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 开启自动代理功能 --&gt;</div><div class=\"line\">\t&lt;aop:aspectj-autoproxy/&gt;</div></pre></td></tr></table></figure></p>\n<p>3.编写一个目标类<br>4.编写一个切面类，在类上使用@Aspect注解，在类的方法上使用@Before注解定义前置通知<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MyAdvisor &#123;\t</div><div class=\"line\">    @Pointcut(value=&quot;execution(* cn.hugang.aop.aspectJ.annotation.*Dao.*(..))&quot;)</div><div class=\"line\">\tpublic void myPointCut()&#123;&#125;;</div><div class=\"line\">\t</div><div class=\"line\">\t// 定义一个前置通知方法,通过切点表达式描述要拦截的目标对象的方法</div><div class=\"line\">\t@Before(value = &quot;MyAdvisor.myPointCut()&quot;)//引用上面定义的切点表达式</div><div class=\"line\">\tpublic void before1(JoinPoint jp) &#123;            //连接点对象</div><div class=\"line\">\t\t//System.out.println(&quot;【前置通知】拦截的的方法：&quot; + jp.getSignature().getName());</div><div class=\"line\">\t&#125;</div><div class=\"line\">｝</div></pre></td></tr></table></figure></p>\n<p>5.在spring配置文件中注册目标对象和切面类<br>6.读取spring配置文件，从spring工厂中获取一个代理对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;cn/hugang/aop/aspectJ/annotation/beans.xml&quot;);</div><div class=\"line\">UserDao userDao = (UserDao) ctx.getBean(&quot;userDao&quot;);</div><div class=\"line\">userDao.save(&quot;&quot;);</div><div class=\"line\">userDao.delete();</div><div class=\"line\">userDao.update();</div><div class=\"line\">System.out.println(userDao.getClass().getSimpleName())</div></pre></td></tr></table></figure></p>\n<p>7.后置，环绕，异常，最终通知<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t//统一抽取一个切点表达式</div><div class=\"line\">\t@Pointcut(value=&quot;execution(* cn.hugang.aop.aspectJ.annotation.*Dao.*(..))&quot;)</div><div class=\"line\">\tpublic void myPointCut()&#123;&#125;;</div><div class=\"line\">\t</div><div class=\"line\">\t//后置通知</div><div class=\"line\">//returning=&quot;ret&quot;   ret:拦截到的方法执行后的返回值</div><div class=\"line\">\t@AfterReturning(value=&quot;MyAdvisor.myPointCut()&quot;,returning=&quot;ret&quot;)</div><div class=\"line\">\tpublic void afterReturing1(JoinPoint jp,Object ret)&#123;</div><div class=\"line\">\t\t//System.out.println(&quot;【后置通知】拦截的的方法：&quot; + jp.getSignature().getName() + &quot;,此方法的执行结果为：&quot; + ret);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t//环绕通知</div><div class=\"line\">\t@Around(value=&quot;MyAdvisor.myPointCut()&quot;)</div><div class=\"line\">\tpublic Object around1(ProceedingJoinPoint pjp) throws Throwable&#123;</div><div class=\"line\">\t\t//System.out.println(&quot;【环绕通知】前&quot;);</div><div class=\"line\">\t\t//必须在环绕通知中手动调用目标对象的方法，否则目标对象的方法将被拦截，不会执行</div><div class=\"line\">\t\tObject value = pjp.proceed();//调用目标对象的方法</div><div class=\"line\">\t\t//System.out.println(&quot;【环绕通知】后&quot;);</div><div class=\"line\">\t\treturn value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t//异常通知</div><div class=\"line\">\t@AfterThrowing(value=&quot;MyAdvisor.myPointCut()&quot;,throwing=&quot;ex&quot;)  //ex:异常的信息</div><div class=\"line\">\tpublic void afterThrowing1(JoinPoint jp,Throwable ex)&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;【异常通知】执行了，拦截到的目标方法为：&quot; + jp.getSignature().getName() + &quot;,异常信息为：&quot; + ex);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t//最终通知</div><div class=\"line\">\t@After(value=&quot;MyAdvisor.myPointCut()&quot;)</div><div class=\"line\">\tpublic void after1(JoinPoint jp)&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;【最终通知】拦截到目标方法：&quot; + jp.getSignature().getName());</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjhmwzqjy00012fpz5zh5vrjo","category_id":"cjhmwzqkc00052fpzge16gvy4","_id":"cjhmwzqki00092fpz7tonpdde"},{"post_id":"cjhmwzqk800032fpzgn8kh5jy","category_id":"cjhmwzqkg00082fpz9xu0pw23","_id":"cjhmwzqkl000b2fpzyjm5noyd"},{"post_id":"cjhmwzqke00062fpz0uype9f7","category_id":"cjhmwzqkc00052fpzge16gvy4","_id":"cjhmwzqkm000c2fpzl76ll6iq"},{"post_id":"cjhmwzqmu000d2fpzldl5hu8h","category_id":"cjhmwzqmw000f2fpz1csdvvbk","_id":"cjhmwzqmz000k2fpzjvqtq6v5"},{"post_id":"cjhmwzqmv000e2fpzjbjlx6j1","category_id":"cjhmwzqmw000f2fpz1csdvvbk","_id":"cjhmwzqmz000m2fpzwpdbt0ls"},{"post_id":"cjhmwzqna000n2fpz31ng82oq","category_id":"cjhmwzqmw000f2fpz1csdvvbk","_id":"cjhmwzqnc000p2fpzb5nxikoj"}],"PostTag":[{"post_id":"cjhmwzqmu000d2fpzldl5hu8h","tag_id":"cjhmwzqmw000g2fpz5htf9tbj","_id":"cjhmwzqmy000j2fpzs5vp2ghq"},{"post_id":"cjhmwzqmv000e2fpzjbjlx6j1","tag_id":"cjhmwzqmw000g2fpz5htf9tbj","_id":"cjhmwzqmz000l2fpz6yr2b5pz"},{"post_id":"cjhmwzqna000n2fpz31ng82oq","tag_id":"cjhmwzqnb000o2fpzbmx6fluq","_id":"cjhmwzqnc000q2fpzrtx2xkzy"}],"Tag":[{"name":"javaEE框架","_id":"cjhmwzqmw000g2fpz5htf9tbj"},{"name":"JavaEE框架","_id":"cjhmwzqnb000o2fpzbmx6fluq"}]}}